{"version":3,"sources":["hooks/useCesium.js","../node_modules/cesium/Source/Core sync ///cesium//cesium//Source//Core//buildModuleUrl/.js","utils/cesium.js","../node_modules/cesium-navigation-es6/node_modules/cesium/Source/Core sync ///cesium//cesium//Source//Core//buildModuleUrl/.js","cases/components/CesiumContainer/CesiumContainer.jsx","cases/components/Toolbar/Toolbar.jsx","cases/Camera/HeadingPitchRoll.jsx"],"names":["useCesium","callback","viewerRef","useRef","useEffect","viewer","Viewer","fullscreenElement","scene","debugShowFramesPerSecond","postProcessStages","fxaa","enabled","createViewer","current","destroy","webpackEmptyContext","req","e","Error","code","keys","resolve","module","exports","id","getHeadingPitchRoll","p1","p2","heading","getHeadingDegree","pitch","x1","x","y1","y","z1","z","x2","y2","z2","xDiff","yDiff","zDiff","distance","Cartesian3","sinTheta","theta","Math","abs","asin","PI","getPitchDegree","roll","dividend","divisor","tanAlpha","alpha","atan","multiplier","CesiumContainer","children","Toolbar","className","createRandomInteger","parseInt","random","InputItem","name","xs","Group","ControlLabel","toUpperCase","Control","style","width","accepter","InputNumber","size","min","max","formDefaultValue","position","fromDegrees","localToWorldMatrix","Transforms","eastNorthUpToFixedFrame","worldToLocalMatrix","Matrix4","inverse","localPosition","multiplyByPoint","HeadingPitchRoll","useState","formValue","setFormValue","viewerCesiumNavigationMixin","resetCamera","camera","flyTo","destination","orientation","createPointAndLook","offset","pointLocalPosition","add","pointPosition","entities","ellipsoid","radii","material","Color","fromBytes","createPoint","CesiumMath","toRadians","onChange","formvalue","onSubmit","parseFloat","marginBottom","appearance","type","block","onClick","color","removeAll"],"mappings":"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","file":"static/js/4.3c0e3e21.chunk.js","sourcesContent":["import { useEffect, useRef } from 'react'\nimport { Viewer } from 'cesium'\n\n/**\n * @callback CesiumHandler\n *\n * @param {Viewer} viewer Viewer instance.\n */\n\n/** @typedef {import('react')} React */\n\n/**\n * Use cesium hook.\n *\n * @param {CesiumHandler} callback\n * @returns {React.MutableRefObject.<null|Viewer>}\n */\nfunction useCesium(callback) {\n  const viewerRef = useRef(null)\n  useEffect(() => {\n    const viewer = createViewer()\n    viewerRef.current = viewer\n\n    callback && callback(viewer)\n\n    return () => {\n      try {\n        viewer.destroy()\n      } catch {}\n    }\n\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [])\n\n  return viewerRef\n}\n\nfunction createViewer() {\n  const viewer = new Viewer('cesiumContainer', {\n    fullscreenElement: 'cesiumContainer'\n  })\n\n  viewer.scene.debugShowFramesPerSecond = true\n  viewer.scene.postProcessStages.fxaa.enabled = true\n\n  return viewer\n}\n\nexport default useCesium\n","function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 202;","import { Cartographic, Transforms, Matrix4, Cartesian3 } from 'cesium'\n\n/**\n * Add height of a Cartesian3 instance.\n *\n * @param {Cartesian3} cartesian Cartesian3 instance.\n * @param {number} height Height to add.\n */\nexport function addHeight(cartesian, height) {\n  const cartographic = Cartographic.fromCartesian(cartesian)\n  cartographic.height += height\n\n  return Cartographic.toCartesian(cartographic)\n}\n\n/**`\n * Set height of a Cartesian3 instance.\n *\n * @param {Cartesian3} cartesian Cartesian3 instance.\n * @param {number} height Height to set.\n */\nexport function setHeight(cartesian, height) {\n  const cartographic = Cartographic.fromCartesian(cartesian)\n  cartographic.height = height\n\n  return Cartographic.toCartesian(cartographic)\n}\n\n/**\n * Get heading pitch and roll\n *\n * @param {Cartesian3} p1 The first position.\n * @param {Cartesian3} p2 Another position.\n */\nexport function getHeadingPitchRoll(p1, p2) {\n  let heading = getHeadingDegree(p1, p2)\n  let pitch = getPitchDegree(p1, p2)\n\n  return {\n    heading,\n    pitch,\n    roll: 0\n  }\n}\n\n/**\n * Get heading degree.\n *\n * @param {Cartesian3} p1 The first position.\n * @param {Cartesian3} p2 Another position.\n * @returns Heading degree.\n */\nexport function getHeadingDegree(p1, p2) {\n  const { x: x1, y: y1 } = p1\n  const { x: x2, y: y2 } = p2\n\n  const dividend = x2 - x1\n  const divisor = y2 - y1\n\n  // If x2=x1, alpha could only be 0 or 180.\n  if (dividend === 0) {\n    return divisor >= 0 ? 0 : 180\n  }\n\n  // If y2=y1, alpha could only be 90 or -90.\n  if (divisor === 0) {\n    // There is no equal judgement due to it already be done above.\n    return dividend > 0 ? 90 : -90\n  }\n\n  // Calculate the alpha angle.\n  const tanAlpha = (x2 - x1) / (y2 - y1)\n  const alpha = (Math.atan(tanAlpha) / Math.PI) * 180\n\n  if (divisor > 0) {\n    return alpha\n  } else {\n    // If y2-y1<0, alpha is just the supplement of real angle.\n    const multiplier = x2 - x1 > 0 ? 1 : -1\n    const realAlpha = (180 - Math.abs(alpha)) * multiplier\n    return realAlpha\n  }\n}\n\n/**\n * Get pitch degree.\n *\n * @param {Cartesian3} p1 The first position.\n * @param {Cartesian3} p2 Another position.\n * @returns Pitch degree.\n */\nexport function getPitchDegree(p1, p2) {\n  const { x: x1, y: y1, z: z1 } = p1\n  const { x: x2, y: y2, z: z2 } = p2\n\n  const xDiff = x2 - x1\n  const yDiff = y2 - y1\n  const zDiff = z2 - z1\n\n  // The new position is laid on x-y surface, so there\n  // is no pitch.\n  if (zDiff === 0) {\n    return 0\n  }\n\n  // The new position is laid on z-axis, so if z2-z1>0,\n  // 90; if z2-z1<0, -90.\n  if (xDiff === 0 && yDiff === 0) {\n    return zDiff > 0 ? 90 : -90\n  }\n\n  const distance = Cartesian3.distance(p1, p2)\n\n  // tanθ=distance from new position to sub point / distance from\n  // sub point to previous position.\n  const sinTheta = (z2 - z1) / distance\n  const theta = (Math.abs(Math.asin(sinTheta)) / Math.PI) * 180\n\n  // Pitch's plus or minus is according to z2-z1, if z2-z1>0, positive\n  // otherwise negative.\n  return zDiff > 0 ? theta : -theta\n}\n\n/**\n * Get local positions.\n *\n * @param {Cartesian3} prev Prev Cartesian3 position.\n * @param {Cartesian3} next Next Cartesian3 position.\n * @returns {{prev: Cartesian3, next: Cartesian3, localToWorldMatrix: Matrix4, worldToLocalMatrix: Matrix4}} Local positions\n */\nexport function getLocalPositions(prev, next) {\n  const localToWorldMatrix = Transforms.eastNorthUpToFixedFrame(prev)\n  const worldToLocalMatrix = Matrix4.inverse(localToWorldMatrix, new Matrix4())\n\n  const localPosition = Matrix4.multiplyByPoint(worldToLocalMatrix, prev, new Cartesian3())\n  const newPosition = Matrix4.multiplyByPoint(worldToLocalMatrix, next, new Cartesian3())\n\n  return {\n    prev: localPosition,\n    next: newPosition,\n    localToWorldMatrix,\n    worldToLocalMatrix\n  }\n}\n\n/**\n * @param {Cartesian3} postion1\n * @param {Cartesian3} postion2\n * @param {number} pitch\n * @param {number} backward\n * @returns\n */\nexport function getWiderView(postion1, postion2, pitch = -45, backward = 600) {\n  const { prev, next, localToWorldMatrix } = getLocalPositions(postion1, postion2)\n  const heading = getHeadingDegree(prev, next)\n\n  if (pitch === -90) {\n    const _position = prev.clone()\n    _position.z += backward\n    const position = Matrix4.multiplyByPoint(localToWorldMatrix, _position, new Cartesian3())\n    return {\n      position,\n      groundPosition: prev,\n      heading,\n      pitch,\n      roll: 0\n    }\n  }\n\n  const mx = heading > 0 ? -1 : 1\n  const my = Math.abs(heading) < 90 ? -1 : 1\n  const alpha = Math.abs(heading) <= 90 ? Math.abs(heading) : 180 - Math.abs(heading)\n  const alphaRadian = Math.toRadians(alpha)\n  const theta = 90 + pitch\n  const thetaRadian = Math.toRadians(theta)\n\n  const deltaX = backward * Math.sin(alphaRadian) * mx\n  const deltaY = backward * Math.cos(alphaRadian) * my\n  const deltaZ = backward / Math.tan(thetaRadian)\n\n  const _groundPosition = prev.clone()\n\n  _groundPosition.x += deltaX\n  _groundPosition.y += deltaY\n\n  const _position = _groundPosition.clone()\n\n  _position.z += deltaZ\n\n  const position = Matrix4.multiplyByPoint(localToWorldMatrix, _position, new Cartesian3())\n  const groundPosition = Matrix4.multiplyByPoint(\n    localToWorldMatrix,\n    _groundPosition,\n    new Cartesian3()\n  )\n\n  return {\n    position,\n    groundPosition,\n    heading,\n    pitch,\n    roll: 0\n  }\n}\n","function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 296;","import './CesiumContainer.less'\n\nfunction CesiumContainer({ children }) {\n  return <div id=\"cesiumContainer\">{children}</div>\n}\n\nexport default CesiumContainer\n","import './Toolbar.less'\n\nfunction Toolbar({ children }) {\n  return <div className=\"toolbar\">{children}</div>\n}\n\nexport default Toolbar\n","import useCesium from '@/hooks/useCesium'\nimport CesiumContainer from '@/cases/components/CesiumContainer/CesiumContainer'\nimport Toolbar from '@/cases/components/Toolbar/Toolbar'\nimport { Form, InputNumber, Row, Col, Button, ButtonToolbar } from 'rsuite'\nimport { useState } from 'react'\nimport { Cartesian3, Color, Transforms, Matrix4, Math as CesiumMath } from 'cesium'\nimport viewerCesiumNavigationMixin from 'cesium-navigation-es6'\nimport { getHeadingPitchRoll } from '@/utils/cesium'\n\n/** Create random integer between 0~1000 */\nfunction createRandomInteger() {\n  return parseInt((Math.random() - 0.5) * 1000)\n}\n\n/** Create random cartesian3 */\nfunction createRandomOffset() {\n  return new Cartesian3(createRandomInteger(), createRandomInteger(), createRandomInteger())\n}\n\nfunction InputItem({ name }) {\n  return (\n    <Col xs={8}>\n      <Form.Group>\n        <Form.ControlLabel>{name.toUpperCase()}:</Form.ControlLabel>\n        <Form.Control\n          style={{ width: '100%' }}\n          name={name}\n          accepter={InputNumber}\n          size=\"sm\"\n          min={-500}\n          max={500}\n        />\n      </Form.Group>\n    </Col>\n  )\n}\n\nconst formDefaultValue = { x: '0', y: '0', z: '0' }\nconst position = Cartesian3.fromDegrees(136.66, 35.8934, 1500)\nconst localToWorldMatrix = Transforms.eastNorthUpToFixedFrame(position)\nconst worldToLocalMatrix = Matrix4.inverse(localToWorldMatrix, new Matrix4())\nconst localPosition = Matrix4.multiplyByPoint(worldToLocalMatrix, position, new Cartesian3())\n\nfunction HeadingPitchRoll() {\n  const [formValue, setFormValue] = useState(formDefaultValue)\n  const viewerRef = useCesium(viewer => {\n    viewerCesiumNavigationMixin(viewer)\n    resetCamera()\n  })\n\n  // Reset view of camera.\n  function resetCamera() {\n    const viewer = viewerRef.current\n    if (!viewer) return\n\n    viewer.camera.flyTo({\n      destination: position,\n      orientation: {\n        heading: 0,\n        pitch: 0,\n        roll: 0\n      }\n    })\n  }\n\n  /**\n   * Create point entity.\n   *\n   * @param {Cartesian3} position The position to set point.\n   * @returns {Entity}\n   */\n  function createPoint(position) {\n    const viewer = viewerRef.current\n    if (!viewer) return\n\n    return viewer.entities.add({\n      position,\n      ellipsoid: {\n        radii: new Cartesian3(5, 5, 5),\n        material: Color.fromBytes(\n          Math.abs(position.x),\n          Math.abs(position.y),\n          Math.abs(position.z),\n          255\n        )\n      }\n    })\n  }\n\n  /**\n   * Create a point and look at it.\n   *\n   * @param {Cartesian3} offset Relative offset cartesian3.\n   */\n  function createPointAndLook(offset) {\n    const viewer = viewerRef.current\n    if (!viewer) return\n\n    const pointLocalPosition = Cartesian3.add(localPosition, offset, new Cartesian3())\n    const pointPosition = Matrix4.multiplyByPoint(\n      localToWorldMatrix,\n      pointLocalPosition,\n      new Cartesian3()\n    )\n\n    const { heading, pitch, roll } = getHeadingPitchRoll(localPosition, pointLocalPosition)\n\n    createPoint(pointPosition)\n\n    viewer.camera.flyTo({\n      destination: position,\n      orientation: {\n        heading: CesiumMath.toRadians(heading),\n        pitch: CesiumMath.toRadians(pitch),\n        roll: CesiumMath.toRadians(roll)\n      }\n    })\n  }\n\n  /**\n   * Remove all point entities.\n   */\n  function clearAllPoints() {\n    const viewer = viewerRef.current\n    if (!viewer) return\n\n    viewer.entities.removeAll()\n  }\n\n  return (\n    <CesiumContainer>\n      <Toolbar>\n        <Form\n          formValue={formValue}\n          onChange={formvalue => setFormValue({ ...formvalue })}\n          onSubmit={() => {\n            const { x, y, z } = formValue\n            createPointAndLook(new Cartesian3(parseFloat(x), parseFloat(y), parseFloat(z)))\n          }}\n          formDefaultValue={formDefaultValue}\n          style={{ width: 240 }}\n        >\n          <Row style={{ marginBottom: 10 }}>\n            <InputItem name=\"x\" />\n            <InputItem name=\"y\" />\n            <InputItem name=\"z\" />\n          </Row>\n          <ButtonToolbar>\n            <Button appearance=\"primary\" type=\"submit\" size=\"sm\" block>\n              Create Point\n            </Button>\n            <Button\n              type=\"button\"\n              size=\"sm\"\n              block\n              onClick={() => {\n                const offset = createRandomOffset()\n                const { x, y, z } = offset\n                createPointAndLook(offset)\n                setFormValue({ x, y, z })\n              }}\n            >\n              Create Random Point\n            </Button>\n            <Button\n              appearance=\"primary\"\n              color=\"red\"\n              type=\"button\"\n              size=\"sm\"\n              block\n              onClick={clearAllPoints}\n            >\n              Clear all points\n            </Button>\n            <Button type=\"button\" size=\"sm\" block onClick={resetCamera}>\n              Reset Camera\n            </Button>\n          </ButtonToolbar>\n        </Form>\n      </Toolbar>\n    </CesiumContainer>\n  )\n}\n\nexport default HeadingPitchRoll\n"],"sourceRoot":""}