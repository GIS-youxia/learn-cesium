{"version":3,"sources":["../node_modules/date-fns/esm/locale/en-US/_lib/formatDistance/index.js","../node_modules/date-fns/esm/locale/en-US/_lib/formatRelative/index.js","../node_modules/date-fns/esm/locale/_lib/buildLocalizeFn/index.js","../node_modules/date-fns/esm/locale/en-US/_lib/localize/index.js","../node_modules/date-fns/esm/locale/_lib/buildMatchFn/index.js","../node_modules/date-fns/esm/locale/en-US/_lib/match/index.js","../node_modules/date-fns/esm/locale/_lib/buildMatchPatternFn/index.js","../node_modules/date-fns/esm/locale/_lib/buildFormatLongFn/index.js","../node_modules/date-fns/esm/locale/en-GB/_lib/formatLong/index.js","../node_modules/rsuite/esm/locales/default.js","../node_modules/date-fns/esm/locale/en-GB/index.js","../node_modules/date-fns/esm/_lib/requiredArgs/index.js","../node_modules/date-fns/esm/isDate/index.js","../node_modules/date-fns/esm/toDate/index.js","../node_modules/date-fns/esm/isValid/index.js","../node_modules/date-fns/esm/locale/en-US/_lib/formatLong/index.js","../node_modules/date-fns/esm/locale/en-US/index.js","../node_modules/date-fns/esm/_lib/toInteger/index.js","../node_modules/date-fns/esm/addMilliseconds/index.js","../node_modules/date-fns/esm/subMilliseconds/index.js","../node_modules/date-fns/esm/_lib/getUTCDayOfYear/index.js","../node_modules/date-fns/esm/_lib/startOfUTCISOWeek/index.js","../node_modules/date-fns/esm/_lib/getUTCISOWeekYear/index.js","../node_modules/date-fns/esm/_lib/startOfUTCISOWeekYear/index.js","../node_modules/date-fns/esm/_lib/getUTCISOWeek/index.js","../node_modules/date-fns/esm/_lib/startOfUTCWeek/index.js","../node_modules/date-fns/esm/_lib/getUTCWeekYear/index.js","../node_modules/date-fns/esm/_lib/startOfUTCWeekYear/index.js","../node_modules/date-fns/esm/_lib/getUTCWeek/index.js","../node_modules/date-fns/esm/_lib/addLeadingZeros/index.js","../node_modules/date-fns/esm/_lib/format/lightFormatters/index.js","../node_modules/date-fns/esm/_lib/format/formatters/index.js","../node_modules/date-fns/esm/_lib/format/longFormatters/index.js","../node_modules/date-fns/esm/_lib/getTimezoneOffsetInMilliseconds/index.js","../node_modules/date-fns/esm/_lib/protectedTokens/index.js","../node_modules/date-fns/esm/format/index.js","../node_modules/date-fns/esm/_lib/assign/index.js","../node_modules/date-fns/esm/_lib/setUTCDay/index.js","../node_modules/date-fns/esm/parse/_lib/parsers/index.js","../node_modules/date-fns/esm/_lib/setUTCWeek/index.js","../node_modules/date-fns/esm/_lib/setUTCISOWeek/index.js","../node_modules/date-fns/esm/_lib/setUTCISODay/index.js","../node_modules/date-fns/esm/parse/index.js","../node_modules/rsuite/esm/utils/useCustom.js"],"names":["formatDistanceLocale","lessThanXSeconds","one","other","xSeconds","halfAMinute","lessThanXMinutes","xMinutes","aboutXHours","xHours","xDays","aboutXWeeks","xWeeks","aboutXMonths","xMonths","aboutXYears","xYears","overXYears","almostXYears","formatDistance","token","count","options","result","tokenValue","replace","toString","addSuffix","comparison","formatRelativeLocale","lastWeek","yesterday","today","tomorrow","nextWeek","formatRelative","_date","_baseDate","_options","buildLocalizeFn","args","dirtyIndex","dirtyOptions","valuesArray","context","String","formattingValues","defaultWidth","defaultFormattingWidth","width","_defaultWidth","_width","values","argumentCallback","localize","ordinalNumber","dirtyNumber","number","Number","rem100","era","narrow","abbreviated","wide","quarter","month","day","short","dayPeriod","am","pm","midnight","noon","morning","afternoon","evening","night","buildMatchFn","string","arguments","length","undefined","matchPattern","matchPatterns","defaultMatchWidth","matchResult","match","value","matchedString","parsePatterns","defaultParseWidth","key","Array","isArray","findIndex","pattern","test","findKey","valueCallback","rest","slice","object","predicate","hasOwnProperty","array","parsePattern","parseInt","parseResult","any","index","buildFormatLongFn","format","formats","Calendar","sunday","monday","tuesday","wednesday","thursday","friday","saturday","ok","hours","minutes","seconds","formattedMonthPattern","formattedDayPattern","dateLocale","code","formatLong","date","full","long","medium","time","dateTime","weekStartsOn","firstWeekContainsDate","common","loading","emptyMessage","Plaintext","unfilled","notSelected","notUploaded","Pagination","more","prev","next","first","last","limit","total","skip","DatePicker","_extends","DateRangePicker","last7Days","Picker","noResultsText","placeholder","searchPlaceholder","checkAll","InputPicker","newItem","createOption","Uploader","inited","progress","error","complete","emptyFile","upload","CloseButton","closeLabel","Breadcrumb","expandText","Toggle","on","off","requiredArgs","required","TypeError","isDate","Date","Object","prototype","call","toDate","argument","argStr","getTime","console","warn","Error","stack","NaN","isValid","dirtyDate","isNaN","locale","toInteger","Math","ceil","floor","addMilliseconds","dirtyAmount","timestamp","amount","subMilliseconds","MILLISECONDS_IN_DAY","startOfUTCISOWeek","getUTCDay","diff","setUTCDate","getUTCDate","setUTCHours","getUTCISOWeekYear","year","getUTCFullYear","fourthOfJanuaryOfNextYear","setUTCFullYear","startOfNextYear","fourthOfJanuaryOfThisYear","startOfThisYear","startOfUTCISOWeekYear","fourthOfJanuary","MILLISECONDS_IN_WEEK","getUTCISOWeek","round","startOfUTCWeek","localeWeekStartsOn","defaultWeekStartsOn","RangeError","getUTCWeekYear","localeFirstWeekContainsDate","defaultFirstWeekContainsDate","firstWeekOfNextYear","firstWeekOfThisYear","startOfUTCWeekYear","firstWeek","getUTCWeek","addLeadingZeros","targetLength","sign","output","abs","formatters","y","signedYear","M","getUTCMonth","d","a","dayPeriodEnumValue","getUTCHours","toUpperCase","h","H","m","getUTCMinutes","s","getUTCSeconds","S","numberOfDigits","milliseconds","getUTCMilliseconds","pow","dayPeriodEnum","G","unit","lightFormatters","Y","signedWeekYear","weekYear","R","u","Q","q","L","w","week","I","isoWeek","D","dayOfYear","setUTCMonth","startOfYearTimestamp","difference","getUTCDayOfYear","E","dayOfWeek","e","localDayOfWeek","c","i","isoDayOfWeek","toLowerCase","b","B","K","k","X","_localize","timezoneOffset","_originalDate","getTimezoneOffset","formatTimezoneWithOptionalMinutes","formatTimezone","x","O","formatTimezoneShort","z","t","originalDate","T","offset","dirtyDelimiter","absOffset","delimiter","dateLongFormatter","timeLongFormatter","longFormatters","p","P","dateTimeFormat","datePattern","timePattern","getTimezoneOffsetInMilliseconds","utcDate","UTC","getFullYear","getMonth","getDate","getHours","getMinutes","getSeconds","getMilliseconds","protectedDayOfYearTokens","protectedWeekYearTokens","isProtectedDayOfYearToken","indexOf","isProtectedWeekYearToken","throwProtectedError","input","concat","formattingTokensRegExp","longFormattingTokensRegExp","escapedStringRegExp","doubleQuoteRegExp","unescapedLatinCharacterRegExp","cleanEscapedString","assign","target","dirtyObject","property","setUTCDay","dirtyDay","currentDay","remainder","dayIndex","numericPatterns","timezonePatterns","parseNumericPattern","parseTimezonePattern","parseAnyDigitsSigned","parseNDigits","n","RegExp","parseNDigitsSigned","dayPeriodEnumToHours","enumValue","normalizeTwoDigitYear","twoDigitYear","currentYear","isCommonEra","absCurrentYear","rangeEnd","DAYS_IN_MONTH","DAYS_IN_MONTH_LEAP_YEAR","isLeapYearIndex","parsers","priority","parse","set","flags","incompatibleTokens","isTwoDigitYear","validate","normalizedTwoDigitYear","_match","_flags","firstWeekOfYear","dirtyWeek","setUTCWeek","dirtyISOWeek","setUTCISOWeek","subPriority","isLeapYear","wholeWeekDays","setUTCISODay","isPM","setUTCMinutes","setUTCSeconds","setUTCMilliseconds","timestampIsSet","_token","notWhitespaceRegExp","dateToSystemTimezone","convertedDate","setFullYear","setHours","mergeObject","list","reduce","useCustom","keys","overrideLocale","_locale$Calendar2","_locale$Calendar4","_useContext","useContext","CustomContext","_useContext$locale","defaultLocale","_useContext$rtl","rtl","window","document","body","getAttribute","dir","formatDate","parseDate","componentLocale","map","defaultFormatDate","useCallback","formatStr","_locale$Calendar","dirtyFormatStr","formatterOptions","substring","firstCharacter","longFormatter","join","formatter","useAdditionalWeekYearTokens","useAdditionalDayOfYearTokens","defaultParseDate","dateString","formatString","_locale$Calendar3","dirtyDateString","dirtyFormatString","dirtyReferenceDate","subFnOptions","setters","tokens","usedTokens","parser","incompatibleToken","_i","usedToken","fullToken","push","uniquePrioritySetters","setter","sort","filter","setterArray"],"mappings":"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","file":"static/js/2.514b1eae.chunk.js","sourcesContent":["var formatDistanceLocale = {\n  lessThanXSeconds: {\n    one: 'less than a second',\n    other: 'less than {{count}} seconds'\n  },\n  xSeconds: {\n    one: '1 second',\n    other: '{{count}} seconds'\n  },\n  halfAMinute: 'half a minute',\n  lessThanXMinutes: {\n    one: 'less than a minute',\n    other: 'less than {{count}} minutes'\n  },\n  xMinutes: {\n    one: '1 minute',\n    other: '{{count}} minutes'\n  },\n  aboutXHours: {\n    one: 'about 1 hour',\n    other: 'about {{count}} hours'\n  },\n  xHours: {\n    one: '1 hour',\n    other: '{{count}} hours'\n  },\n  xDays: {\n    one: '1 day',\n    other: '{{count}} days'\n  },\n  aboutXWeeks: {\n    one: 'about 1 week',\n    other: 'about {{count}} weeks'\n  },\n  xWeeks: {\n    one: '1 week',\n    other: '{{count}} weeks'\n  },\n  aboutXMonths: {\n    one: 'about 1 month',\n    other: 'about {{count}} months'\n  },\n  xMonths: {\n    one: '1 month',\n    other: '{{count}} months'\n  },\n  aboutXYears: {\n    one: 'about 1 year',\n    other: 'about {{count}} years'\n  },\n  xYears: {\n    one: '1 year',\n    other: '{{count}} years'\n  },\n  overXYears: {\n    one: 'over 1 year',\n    other: 'over {{count}} years'\n  },\n  almostXYears: {\n    one: 'almost 1 year',\n    other: 'almost {{count}} years'\n  }\n};\n\nvar formatDistance = function (token, count, options) {\n  var result;\n  var tokenValue = formatDistanceLocale[token];\n\n  if (typeof tokenValue === 'string') {\n    result = tokenValue;\n  } else if (count === 1) {\n    result = tokenValue.one;\n  } else {\n    result = tokenValue.other.replace('{{count}}', count.toString());\n  }\n\n  if (options !== null && options !== void 0 && options.addSuffix) {\n    if (options.comparison && options.comparison > 0) {\n      return 'in ' + result;\n    } else {\n      return result + ' ago';\n    }\n  }\n\n  return result;\n};\n\nexport default formatDistance;","var formatRelativeLocale = {\n  lastWeek: \"'last' eeee 'at' p\",\n  yesterday: \"'yesterday at' p\",\n  today: \"'today at' p\",\n  tomorrow: \"'tomorrow at' p\",\n  nextWeek: \"eeee 'at' p\",\n  other: 'P'\n};\n\nvar formatRelative = function (token, _date, _baseDate, _options) {\n  return formatRelativeLocale[token];\n};\n\nexport default formatRelative;","export default function buildLocalizeFn(args) {\n  return function (dirtyIndex, dirtyOptions) {\n    var options = dirtyOptions || {};\n    var context = options.context ? String(options.context) : 'standalone';\n    var valuesArray;\n\n    if (context === 'formatting' && args.formattingValues) {\n      var defaultWidth = args.defaultFormattingWidth || args.defaultWidth;\n      var width = options.width ? String(options.width) : defaultWidth;\n      valuesArray = args.formattingValues[width] || args.formattingValues[defaultWidth];\n    } else {\n      var _defaultWidth = args.defaultWidth;\n\n      var _width = options.width ? String(options.width) : args.defaultWidth;\n\n      valuesArray = args.values[_width] || args.values[_defaultWidth];\n    }\n\n    var index = args.argumentCallback ? args.argumentCallback(dirtyIndex) : dirtyIndex; // @ts-ignore: For some reason TypeScript just don't want to match it, no matter how hard we try. I challenge you to try to remove it!\n\n    return valuesArray[index];\n  };\n}","import buildLocalizeFn from \"../../../_lib/buildLocalizeFn/index.js\";\nvar eraValues = {\n  narrow: ['B', 'A'],\n  abbreviated: ['BC', 'AD'],\n  wide: ['Before Christ', 'Anno Domini']\n};\nvar quarterValues = {\n  narrow: ['1', '2', '3', '4'],\n  abbreviated: ['Q1', 'Q2', 'Q3', 'Q4'],\n  wide: ['1st quarter', '2nd quarter', '3rd quarter', '4th quarter']\n}; // Note: in English, the names of days of the week and months are capitalized.\n// If you are making a new locale based on this one, check if the same is true for the language you're working on.\n// Generally, formatted dates should look like they are in the middle of a sentence,\n// e.g. in Spanish language the weekdays and months should be in the lowercase.\n\nvar monthValues = {\n  narrow: ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D'],\n  abbreviated: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\n  wide: ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']\n};\nvar dayValues = {\n  narrow: ['S', 'M', 'T', 'W', 'T', 'F', 'S'],\n  short: ['Su', 'Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa'],\n  abbreviated: ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],\n  wide: ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday']\n};\nvar dayPeriodValues = {\n  narrow: {\n    am: 'a',\n    pm: 'p',\n    midnight: 'mi',\n    noon: 'n',\n    morning: 'morning',\n    afternoon: 'afternoon',\n    evening: 'evening',\n    night: 'night'\n  },\n  abbreviated: {\n    am: 'AM',\n    pm: 'PM',\n    midnight: 'midnight',\n    noon: 'noon',\n    morning: 'morning',\n    afternoon: 'afternoon',\n    evening: 'evening',\n    night: 'night'\n  },\n  wide: {\n    am: 'a.m.',\n    pm: 'p.m.',\n    midnight: 'midnight',\n    noon: 'noon',\n    morning: 'morning',\n    afternoon: 'afternoon',\n    evening: 'evening',\n    night: 'night'\n  }\n};\nvar formattingDayPeriodValues = {\n  narrow: {\n    am: 'a',\n    pm: 'p',\n    midnight: 'mi',\n    noon: 'n',\n    morning: 'in the morning',\n    afternoon: 'in the afternoon',\n    evening: 'in the evening',\n    night: 'at night'\n  },\n  abbreviated: {\n    am: 'AM',\n    pm: 'PM',\n    midnight: 'midnight',\n    noon: 'noon',\n    morning: 'in the morning',\n    afternoon: 'in the afternoon',\n    evening: 'in the evening',\n    night: 'at night'\n  },\n  wide: {\n    am: 'a.m.',\n    pm: 'p.m.',\n    midnight: 'midnight',\n    noon: 'noon',\n    morning: 'in the morning',\n    afternoon: 'in the afternoon',\n    evening: 'in the evening',\n    night: 'at night'\n  }\n};\n\nvar ordinalNumber = function (dirtyNumber, _options) {\n  var number = Number(dirtyNumber); // If ordinal numbers depend on context, for example,\n  // if they are different for different grammatical genders,\n  // use `options.unit`.\n  //\n  // `unit` can be 'year', 'quarter', 'month', 'week', 'date', 'dayOfYear',\n  // 'day', 'hour', 'minute', 'second'.\n\n  var rem100 = number % 100;\n\n  if (rem100 > 20 || rem100 < 10) {\n    switch (rem100 % 10) {\n      case 1:\n        return number + 'st';\n\n      case 2:\n        return number + 'nd';\n\n      case 3:\n        return number + 'rd';\n    }\n  }\n\n  return number + 'th';\n};\n\nvar localize = {\n  ordinalNumber: ordinalNumber,\n  era: buildLocalizeFn({\n    values: eraValues,\n    defaultWidth: 'wide'\n  }),\n  quarter: buildLocalizeFn({\n    values: quarterValues,\n    defaultWidth: 'wide',\n    argumentCallback: function (quarter) {\n      return quarter - 1;\n    }\n  }),\n  month: buildLocalizeFn({\n    values: monthValues,\n    defaultWidth: 'wide'\n  }),\n  day: buildLocalizeFn({\n    values: dayValues,\n    defaultWidth: 'wide'\n  }),\n  dayPeriod: buildLocalizeFn({\n    values: dayPeriodValues,\n    defaultWidth: 'wide',\n    formattingValues: formattingDayPeriodValues,\n    defaultFormattingWidth: 'wide'\n  })\n};\nexport default localize;","export default function buildMatchFn(args) {\n  return function (string) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var width = options.width;\n    var matchPattern = width && args.matchPatterns[width] || args.matchPatterns[args.defaultMatchWidth];\n    var matchResult = string.match(matchPattern);\n\n    if (!matchResult) {\n      return null;\n    }\n\n    var matchedString = matchResult[0];\n    var parsePatterns = width && args.parsePatterns[width] || args.parsePatterns[args.defaultParseWidth];\n    var key = Array.isArray(parsePatterns) ? findIndex(parsePatterns, function (pattern) {\n      return pattern.test(matchedString);\n    }) : findKey(parsePatterns, function (pattern) {\n      return pattern.test(matchedString);\n    });\n    var value;\n    value = args.valueCallback ? args.valueCallback(key) : key;\n    value = options.valueCallback ? options.valueCallback(value) : value;\n    var rest = string.slice(matchedString.length);\n    return {\n      value: value,\n      rest: rest\n    };\n  };\n}\n\nfunction findKey(object, predicate) {\n  for (var key in object) {\n    if (object.hasOwnProperty(key) && predicate(object[key])) {\n      return key;\n    }\n  }\n\n  return undefined;\n}\n\nfunction findIndex(array, predicate) {\n  for (var key = 0; key < array.length; key++) {\n    if (predicate(array[key])) {\n      return key;\n    }\n  }\n\n  return undefined;\n}","import buildMatchFn from \"../../../_lib/buildMatchFn/index.js\";\nimport buildMatchPatternFn from \"../../../_lib/buildMatchPatternFn/index.js\";\nvar matchOrdinalNumberPattern = /^(\\d+)(th|st|nd|rd)?/i;\nvar parseOrdinalNumberPattern = /\\d+/i;\nvar matchEraPatterns = {\n  narrow: /^(b|a)/i,\n  abbreviated: /^(b\\.?\\s?c\\.?|b\\.?\\s?c\\.?\\s?e\\.?|a\\.?\\s?d\\.?|c\\.?\\s?e\\.?)/i,\n  wide: /^(before christ|before common era|anno domini|common era)/i\n};\nvar parseEraPatterns = {\n  any: [/^b/i, /^(a|c)/i]\n};\nvar matchQuarterPatterns = {\n  narrow: /^[1234]/i,\n  abbreviated: /^q[1234]/i,\n  wide: /^[1234](th|st|nd|rd)? quarter/i\n};\nvar parseQuarterPatterns = {\n  any: [/1/i, /2/i, /3/i, /4/i]\n};\nvar matchMonthPatterns = {\n  narrow: /^[jfmasond]/i,\n  abbreviated: /^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,\n  wide: /^(january|february|march|april|may|june|july|august|september|october|november|december)/i\n};\nvar parseMonthPatterns = {\n  narrow: [/^j/i, /^f/i, /^m/i, /^a/i, /^m/i, /^j/i, /^j/i, /^a/i, /^s/i, /^o/i, /^n/i, /^d/i],\n  any: [/^ja/i, /^f/i, /^mar/i, /^ap/i, /^may/i, /^jun/i, /^jul/i, /^au/i, /^s/i, /^o/i, /^n/i, /^d/i]\n};\nvar matchDayPatterns = {\n  narrow: /^[smtwf]/i,\n  short: /^(su|mo|tu|we|th|fr|sa)/i,\n  abbreviated: /^(sun|mon|tue|wed|thu|fri|sat)/i,\n  wide: /^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i\n};\nvar parseDayPatterns = {\n  narrow: [/^s/i, /^m/i, /^t/i, /^w/i, /^t/i, /^f/i, /^s/i],\n  any: [/^su/i, /^m/i, /^tu/i, /^w/i, /^th/i, /^f/i, /^sa/i]\n};\nvar matchDayPeriodPatterns = {\n  narrow: /^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,\n  any: /^([ap]\\.?\\s?m\\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i\n};\nvar parseDayPeriodPatterns = {\n  any: {\n    am: /^a/i,\n    pm: /^p/i,\n    midnight: /^mi/i,\n    noon: /^no/i,\n    morning: /morning/i,\n    afternoon: /afternoon/i,\n    evening: /evening/i,\n    night: /night/i\n  }\n};\nvar match = {\n  ordinalNumber: buildMatchPatternFn({\n    matchPattern: matchOrdinalNumberPattern,\n    parsePattern: parseOrdinalNumberPattern,\n    valueCallback: function (value) {\n      return parseInt(value, 10);\n    }\n  }),\n  era: buildMatchFn({\n    matchPatterns: matchEraPatterns,\n    defaultMatchWidth: 'wide',\n    parsePatterns: parseEraPatterns,\n    defaultParseWidth: 'any'\n  }),\n  quarter: buildMatchFn({\n    matchPatterns: matchQuarterPatterns,\n    defaultMatchWidth: 'wide',\n    parsePatterns: parseQuarterPatterns,\n    defaultParseWidth: 'any',\n    valueCallback: function (index) {\n      return index + 1;\n    }\n  }),\n  month: buildMatchFn({\n    matchPatterns: matchMonthPatterns,\n    defaultMatchWidth: 'wide',\n    parsePatterns: parseMonthPatterns,\n    defaultParseWidth: 'any'\n  }),\n  day: buildMatchFn({\n    matchPatterns: matchDayPatterns,\n    defaultMatchWidth: 'wide',\n    parsePatterns: parseDayPatterns,\n    defaultParseWidth: 'any'\n  }),\n  dayPeriod: buildMatchFn({\n    matchPatterns: matchDayPeriodPatterns,\n    defaultMatchWidth: 'any',\n    parsePatterns: parseDayPeriodPatterns,\n    defaultParseWidth: 'any'\n  })\n};\nexport default match;","export default function buildMatchPatternFn(args) {\n  return function (string) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var matchResult = string.match(args.matchPattern);\n    if (!matchResult) return null;\n    var matchedString = matchResult[0];\n    var parseResult = string.match(args.parsePattern);\n    if (!parseResult) return null;\n    var value = args.valueCallback ? args.valueCallback(parseResult[0]) : parseResult[0];\n    value = options.valueCallback ? options.valueCallback(value) : value;\n    var rest = string.slice(matchedString.length);\n    return {\n      value: value,\n      rest: rest\n    };\n  };\n}","export default function buildFormatLongFn(args) {\n  return function () {\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    // TODO: Remove String()\n    var width = options.width ? String(options.width) : args.defaultWidth;\n    var format = args.formats[width] || args.formats[args.defaultWidth];\n    return format;\n  };\n}","import buildFormatLongFn from \"../../../_lib/buildFormatLongFn/index.js\";\nvar dateFormats = {\n  full: 'EEEE, d MMMM yyyy',\n  long: 'd MMMM yyyy',\n  medium: 'd MMM yyyy',\n  short: 'dd/MM/yyyy'\n};\nvar timeFormats = {\n  full: 'HH:mm:ss zzzz',\n  long: 'HH:mm:ss z',\n  medium: 'HH:mm:ss',\n  short: 'HH:mm'\n};\nvar dateTimeFormats = {\n  full: \"{{date}} 'at' {{time}}\",\n  long: \"{{date}} 'at' {{time}}\",\n  medium: '{{date}}, {{time}}',\n  short: '{{date}}, {{time}}'\n};\nvar formatLong = {\n  date: buildFormatLongFn({\n    formats: dateFormats,\n    defaultWidth: 'full'\n  }),\n  time: buildFormatLongFn({\n    formats: timeFormats,\n    defaultWidth: 'full'\n  }),\n  dateTime: buildFormatLongFn({\n    formats: dateTimeFormats,\n    defaultWidth: 'full'\n  })\n};\nexport default formatLong;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport enGB from 'date-fns/locale/en-GB';\nvar Calendar = {\n  sunday: 'Su',\n  monday: 'Mo',\n  tuesday: 'Tu',\n  wednesday: 'We',\n  thursday: 'Th',\n  friday: 'Fr',\n  saturday: 'Sa',\n  ok: 'OK',\n  today: 'Today',\n  yesterday: 'Yesterday',\n  hours: 'Hours',\n  minutes: 'Minutes',\n  seconds: 'Seconds',\n\n  /**\n   * Format of the string is based on Unicode Technical Standard #35:\n   * https://www.unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table\n   **/\n  formattedMonthPattern: 'MMM yyyy',\n  formattedDayPattern: 'dd MMM yyyy',\n  dateLocale: enGB\n};\nexport default {\n  common: {\n    loading: 'Loading...',\n    emptyMessage: 'No data found'\n  },\n  Plaintext: {\n    unfilled: 'Unfilled',\n    notSelected: 'Not selected',\n    notUploaded: 'Not uploaded'\n  },\n  Pagination: {\n    more: 'More',\n    prev: 'Previous',\n    next: 'Next',\n    first: 'First',\n    last: 'Last',\n    limit: '{0} / page',\n    total: 'Total Rows: {0}',\n    skip: 'Go to{0}'\n  },\n  Calendar: Calendar,\n  DatePicker: _extends({}, Calendar),\n  DateRangePicker: _extends({}, Calendar, {\n    last7Days: 'Last 7 Days'\n  }),\n  Picker: {\n    noResultsText: 'No results found',\n    placeholder: 'Select',\n    searchPlaceholder: 'Search',\n    checkAll: 'All'\n  },\n  InputPicker: {\n    newItem: 'New item',\n    createOption: 'Create option \"{0}\"'\n  },\n  Uploader: {\n    inited: 'Initial',\n    progress: 'Uploading',\n    error: 'Error',\n    complete: 'Finished',\n    emptyFile: 'Empty',\n    upload: 'Upload'\n  },\n  CloseButton: {\n    closeLabel: 'Close'\n  },\n  Breadcrumb: {\n    expandText: 'Show path'\n  },\n  Toggle: {\n    on: 'Open',\n    off: 'Close'\n  }\n};","import formatDistance from \"../en-US/_lib/formatDistance/index.js\";\nimport formatRelative from \"../en-US/_lib/formatRelative/index.js\";\nimport localize from \"../en-US/_lib/localize/index.js\";\nimport match from \"../en-US/_lib/match/index.js\";\nimport formatLong from \"./_lib/formatLong/index.js\";\n/**\n * @type {Locale}\n * @category Locales\n * @summary English locale (United Kingdom).\n * @language English\n * @iso-639-2 eng\n * @author Alex [@glintik]{@link https://github.com/glintik}\n */\n\nvar locale = {\n  code: 'en-GB',\n  formatDistance: formatDistance,\n  formatLong: formatLong,\n  formatRelative: formatRelative,\n  localize: localize,\n  match: match,\n  options: {\n    weekStartsOn: 1\n    /* Monday */\n    ,\n    firstWeekContainsDate: 4\n  }\n};\nexport default locale;","export default function requiredArgs(required, args) {\n  if (args.length < required) {\n    throw new TypeError(required + ' argument' + (required > 1 ? 's' : '') + ' required, but only ' + args.length + ' present');\n  }\n}","import requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name isDate\n * @category Common Helpers\n * @summary Is the given value a date?\n *\n * @description\n * Returns true if the given value is an instance of Date. The function works for dates transferred across iframes.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {*} value - the value to check\n * @returns {boolean} true if the given value is a date\n * @throws {TypeError} 1 arguments required\n *\n * @example\n * // For a valid date:\n * const result = isDate(new Date())\n * //=> true\n *\n * @example\n * // For an invalid date:\n * const result = isDate(new Date(NaN))\n * //=> true\n *\n * @example\n * // For some value:\n * const result = isDate('2014-02-31')\n * //=> false\n *\n * @example\n * // For an object:\n * const result = isDate({})\n * //=> false\n */\n\nexport default function isDate(value) {\n  requiredArgs(1, arguments);\n  return value instanceof Date || typeof value === 'object' && Object.prototype.toString.call(value) === '[object Date]';\n}","import requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name toDate\n * @category Common Helpers\n * @summary Convert the given argument to an instance of Date.\n *\n * @description\n * Convert the given argument to an instance of Date.\n *\n * If the argument is an instance of Date, the function returns its clone.\n *\n * If the argument is a number, it is treated as a timestamp.\n *\n * If the argument is none of the above, the function returns Invalid Date.\n *\n * **Note**: *all* Date arguments passed to any *date-fns* function is processed by `toDate`.\n *\n * @param {Date|Number} argument - the value to convert\n * @returns {Date} the parsed date in the local time zone\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Clone the date:\n * const result = toDate(new Date(2014, 1, 11, 11, 30, 30))\n * //=> Tue Feb 11 2014 11:30:30\n *\n * @example\n * // Convert the timestamp to date:\n * const result = toDate(1392098430000)\n * //=> Tue Feb 11 2014 11:30:30\n */\n\nexport default function toDate(argument) {\n  requiredArgs(1, arguments);\n  var argStr = Object.prototype.toString.call(argument); // Clone the date\n\n  if (argument instanceof Date || typeof argument === 'object' && argStr === '[object Date]') {\n    // Prevent the date to lose the milliseconds when passed to new Date() in IE10\n    return new Date(argument.getTime());\n  } else if (typeof argument === 'number' || argStr === '[object Number]') {\n    return new Date(argument);\n  } else {\n    if ((typeof argument === 'string' || argStr === '[object String]') && typeof console !== 'undefined') {\n      // eslint-disable-next-line no-console\n      console.warn(\"Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://git.io/fjule\"); // eslint-disable-next-line no-console\n\n      console.warn(new Error().stack);\n    }\n\n    return new Date(NaN);\n  }\n}","import isDate from \"../isDate/index.js\";\nimport toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name isValid\n * @category Common Helpers\n * @summary Is the given date valid?\n *\n * @description\n * Returns false if argument is Invalid Date and true otherwise.\n * Argument is converted to Date using `toDate`. See [toDate]{@link https://date-fns.org/docs/toDate}\n * Invalid Date is a Date, whose time value is NaN.\n *\n * Time value of Date: http://es5.github.io/#x15.9.1.1\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * - Now `isValid` doesn't throw an exception\n *   if the first argument is not an instance of Date.\n *   Instead, argument is converted beforehand using `toDate`.\n *\n *   Examples:\n *\n *   | `isValid` argument        | Before v2.0.0 | v2.0.0 onward |\n *   |---------------------------|---------------|---------------|\n *   | `new Date()`              | `true`        | `true`        |\n *   | `new Date('2016-01-01')`  | `true`        | `true`        |\n *   | `new Date('')`            | `false`       | `false`       |\n *   | `new Date(1488370835081)` | `true`        | `true`        |\n *   | `new Date(NaN)`           | `false`       | `false`       |\n *   | `'2016-01-01'`            | `TypeError`   | `false`       |\n *   | `''`                      | `TypeError`   | `false`       |\n *   | `1488370835081`           | `TypeError`   | `true`        |\n *   | `NaN`                     | `TypeError`   | `false`       |\n *\n *   We introduce this change to make *date-fns* consistent with ECMAScript behavior\n *   that try to coerce arguments to the expected type\n *   (which is also the case with other *date-fns* functions).\n *\n * @param {*} date - the date to check\n * @returns {Boolean} the date is valid\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // For the valid date:\n * const result = isValid(new Date(2014, 1, 31))\n * //=> true\n *\n * @example\n * // For the value, convertable into a date:\n * const result = isValid(1393804800000)\n * //=> true\n *\n * @example\n * // For the invalid date:\n * const result = isValid(new Date(''))\n * //=> false\n */\n\nexport default function isValid(dirtyDate) {\n  requiredArgs(1, arguments);\n\n  if (!isDate(dirtyDate) && typeof dirtyDate !== 'number') {\n    return false;\n  }\n\n  var date = toDate(dirtyDate);\n  return !isNaN(Number(date));\n}","import buildFormatLongFn from \"../../../_lib/buildFormatLongFn/index.js\";\nvar dateFormats = {\n  full: 'EEEE, MMMM do, y',\n  long: 'MMMM do, y',\n  medium: 'MMM d, y',\n  short: 'MM/dd/yyyy'\n};\nvar timeFormats = {\n  full: 'h:mm:ss a zzzz',\n  long: 'h:mm:ss a z',\n  medium: 'h:mm:ss a',\n  short: 'h:mm a'\n};\nvar dateTimeFormats = {\n  full: \"{{date}} 'at' {{time}}\",\n  long: \"{{date}} 'at' {{time}}\",\n  medium: '{{date}}, {{time}}',\n  short: '{{date}}, {{time}}'\n};\nvar formatLong = {\n  date: buildFormatLongFn({\n    formats: dateFormats,\n    defaultWidth: 'full'\n  }),\n  time: buildFormatLongFn({\n    formats: timeFormats,\n    defaultWidth: 'full'\n  }),\n  dateTime: buildFormatLongFn({\n    formats: dateTimeFormats,\n    defaultWidth: 'full'\n  })\n};\nexport default formatLong;","import formatDistance from \"./_lib/formatDistance/index.js\";\nimport formatLong from \"./_lib/formatLong/index.js\";\nimport formatRelative from \"./_lib/formatRelative/index.js\";\nimport localize from \"./_lib/localize/index.js\";\nimport match from \"./_lib/match/index.js\";\n\n/**\n * @type {Locale}\n * @category Locales\n * @summary English locale (United States).\n * @language English\n * @iso-639-2 eng\n * @author Sasha Koss [@kossnocorp]{@link https://github.com/kossnocorp}\n * @author Lesha Koss [@leshakoss]{@link https://github.com/leshakoss}\n */\nvar locale = {\n  code: 'en-US',\n  formatDistance: formatDistance,\n  formatLong: formatLong,\n  formatRelative: formatRelative,\n  localize: localize,\n  match: match,\n  options: {\n    weekStartsOn: 0\n    /* Sunday */\n    ,\n    firstWeekContainsDate: 1\n  }\n};\nexport default locale;","export default function toInteger(dirtyNumber) {\n  if (dirtyNumber === null || dirtyNumber === true || dirtyNumber === false) {\n    return NaN;\n  }\n\n  var number = Number(dirtyNumber);\n\n  if (isNaN(number)) {\n    return number;\n  }\n\n  return number < 0 ? Math.ceil(number) : Math.floor(number);\n}","import toInteger from \"../_lib/toInteger/index.js\";\nimport toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name addMilliseconds\n * @category Millisecond Helpers\n * @summary Add the specified number of milliseconds to the given date.\n *\n * @description\n * Add the specified number of milliseconds to the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} amount - the amount of milliseconds to be added. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.\n * @returns {Date} the new date with the milliseconds added\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Add 750 milliseconds to 10 July 2014 12:45:30.000:\n * const result = addMilliseconds(new Date(2014, 6, 10, 12, 45, 30, 0), 750)\n * //=> Thu Jul 10 2014 12:45:30.750\n */\n\nexport default function addMilliseconds(dirtyDate, dirtyAmount) {\n  requiredArgs(2, arguments);\n  var timestamp = toDate(dirtyDate).getTime();\n  var amount = toInteger(dirtyAmount);\n  return new Date(timestamp + amount);\n}","import toInteger from \"../_lib/toInteger/index.js\";\nimport addMilliseconds from \"../addMilliseconds/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name subMilliseconds\n * @category Millisecond Helpers\n * @summary Subtract the specified number of milliseconds from the given date.\n *\n * @description\n * Subtract the specified number of milliseconds from the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} amount - the amount of milliseconds to be subtracted. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.\n * @returns {Date} the new date with the milliseconds subtracted\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Subtract 750 milliseconds from 10 July 2014 12:45:30.000:\n * const result = subMilliseconds(new Date(2014, 6, 10, 12, 45, 30, 0), 750)\n * //=> Thu Jul 10 2014 12:45:29.250\n */\n\nexport default function subMilliseconds(dirtyDate, dirtyAmount) {\n  requiredArgs(2, arguments);\n  var amount = toInteger(dirtyAmount);\n  return addMilliseconds(dirtyDate, -amount);\n}","import toDate from \"../../toDate/index.js\";\nimport requiredArgs from \"../requiredArgs/index.js\";\nvar MILLISECONDS_IN_DAY = 86400000; // This function will be a part of public API when UTC function will be implemented.\n// See issue: https://github.com/date-fns/date-fns/issues/376\n\nexport default function getUTCDayOfYear(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  var timestamp = date.getTime();\n  date.setUTCMonth(0, 1);\n  date.setUTCHours(0, 0, 0, 0);\n  var startOfYearTimestamp = date.getTime();\n  var difference = timestamp - startOfYearTimestamp;\n  return Math.floor(difference / MILLISECONDS_IN_DAY) + 1;\n}","import toDate from \"../../toDate/index.js\";\nimport requiredArgs from \"../requiredArgs/index.js\"; // This function will be a part of public API when UTC function will be implemented.\n// See issue: https://github.com/date-fns/date-fns/issues/376\n\nexport default function startOfUTCISOWeek(dirtyDate) {\n  requiredArgs(1, arguments);\n  var weekStartsOn = 1;\n  var date = toDate(dirtyDate);\n  var day = date.getUTCDay();\n  var diff = (day < weekStartsOn ? 7 : 0) + day - weekStartsOn;\n  date.setUTCDate(date.getUTCDate() - diff);\n  date.setUTCHours(0, 0, 0, 0);\n  return date;\n}","import toDate from \"../../toDate/index.js\";\nimport requiredArgs from \"../requiredArgs/index.js\";\nimport startOfUTCISOWeek from \"../startOfUTCISOWeek/index.js\"; // This function will be a part of public API when UTC function will be implemented.\n// See issue: https://github.com/date-fns/date-fns/issues/376\n\nexport default function getUTCISOWeekYear(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  var year = date.getUTCFullYear();\n  var fourthOfJanuaryOfNextYear = new Date(0);\n  fourthOfJanuaryOfNextYear.setUTCFullYear(year + 1, 0, 4);\n  fourthOfJanuaryOfNextYear.setUTCHours(0, 0, 0, 0);\n  var startOfNextYear = startOfUTCISOWeek(fourthOfJanuaryOfNextYear);\n  var fourthOfJanuaryOfThisYear = new Date(0);\n  fourthOfJanuaryOfThisYear.setUTCFullYear(year, 0, 4);\n  fourthOfJanuaryOfThisYear.setUTCHours(0, 0, 0, 0);\n  var startOfThisYear = startOfUTCISOWeek(fourthOfJanuaryOfThisYear);\n\n  if (date.getTime() >= startOfNextYear.getTime()) {\n    return year + 1;\n  } else if (date.getTime() >= startOfThisYear.getTime()) {\n    return year;\n  } else {\n    return year - 1;\n  }\n}","import getUTCISOWeekYear from \"../getUTCISOWeekYear/index.js\";\nimport startOfUTCISOWeek from \"../startOfUTCISOWeek/index.js\";\nimport requiredArgs from \"../requiredArgs/index.js\"; // This function will be a part of public API when UTC function will be implemented.\n// See issue: https://github.com/date-fns/date-fns/issues/376\n\nexport default function startOfUTCISOWeekYear(dirtyDate) {\n  requiredArgs(1, arguments);\n  var year = getUTCISOWeekYear(dirtyDate);\n  var fourthOfJanuary = new Date(0);\n  fourthOfJanuary.setUTCFullYear(year, 0, 4);\n  fourthOfJanuary.setUTCHours(0, 0, 0, 0);\n  var date = startOfUTCISOWeek(fourthOfJanuary);\n  return date;\n}","import toDate from \"../../toDate/index.js\";\nimport startOfUTCISOWeek from \"../startOfUTCISOWeek/index.js\";\nimport startOfUTCISOWeekYear from \"../startOfUTCISOWeekYear/index.js\";\nimport requiredArgs from \"../requiredArgs/index.js\";\nvar MILLISECONDS_IN_WEEK = 604800000; // This function will be a part of public API when UTC function will be implemented.\n// See issue: https://github.com/date-fns/date-fns/issues/376\n\nexport default function getUTCISOWeek(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  var diff = startOfUTCISOWeek(date).getTime() - startOfUTCISOWeekYear(date).getTime(); // Round the number of days to the nearest integer\n  // because the number of milliseconds in a week is not constant\n  // (e.g. it's different in the week of the daylight saving time clock shift)\n\n  return Math.round(diff / MILLISECONDS_IN_WEEK) + 1;\n}","import toDate from \"../../toDate/index.js\";\nimport requiredArgs from \"../requiredArgs/index.js\";\nimport toInteger from \"../toInteger/index.js\"; // This function will be a part of public API when UTC function will be implemented.\n// See issue: https://github.com/date-fns/date-fns/issues/376\n\nexport default function startOfUTCWeek(dirtyDate, dirtyOptions) {\n  requiredArgs(1, arguments);\n  var options = dirtyOptions || {};\n  var locale = options.locale;\n  var localeWeekStartsOn = locale && locale.options && locale.options.weekStartsOn;\n  var defaultWeekStartsOn = localeWeekStartsOn == null ? 0 : toInteger(localeWeekStartsOn);\n  var weekStartsOn = options.weekStartsOn == null ? defaultWeekStartsOn : toInteger(options.weekStartsOn); // Test if weekStartsOn is between 0 and 6 _and_ is not NaN\n\n  if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {\n    throw new RangeError('weekStartsOn must be between 0 and 6 inclusively');\n  }\n\n  var date = toDate(dirtyDate);\n  var day = date.getUTCDay();\n  var diff = (day < weekStartsOn ? 7 : 0) + day - weekStartsOn;\n  date.setUTCDate(date.getUTCDate() - diff);\n  date.setUTCHours(0, 0, 0, 0);\n  return date;\n}","import toDate from \"../../toDate/index.js\";\nimport requiredArgs from \"../requiredArgs/index.js\";\nimport startOfUTCWeek from \"../startOfUTCWeek/index.js\";\nimport toInteger from \"../toInteger/index.js\"; // This function will be a part of public API when UTC function will be implemented.\n// See issue: https://github.com/date-fns/date-fns/issues/376\n\nexport default function getUTCWeekYear(dirtyDate, dirtyOptions) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  var year = date.getUTCFullYear();\n  var options = dirtyOptions || {};\n  var locale = options.locale;\n  var localeFirstWeekContainsDate = locale && locale.options && locale.options.firstWeekContainsDate;\n  var defaultFirstWeekContainsDate = localeFirstWeekContainsDate == null ? 1 : toInteger(localeFirstWeekContainsDate);\n  var firstWeekContainsDate = options.firstWeekContainsDate == null ? defaultFirstWeekContainsDate : toInteger(options.firstWeekContainsDate); // Test if weekStartsOn is between 1 and 7 _and_ is not NaN\n\n  if (!(firstWeekContainsDate >= 1 && firstWeekContainsDate <= 7)) {\n    throw new RangeError('firstWeekContainsDate must be between 1 and 7 inclusively');\n  }\n\n  var firstWeekOfNextYear = new Date(0);\n  firstWeekOfNextYear.setUTCFullYear(year + 1, 0, firstWeekContainsDate);\n  firstWeekOfNextYear.setUTCHours(0, 0, 0, 0);\n  var startOfNextYear = startOfUTCWeek(firstWeekOfNextYear, dirtyOptions);\n  var firstWeekOfThisYear = new Date(0);\n  firstWeekOfThisYear.setUTCFullYear(year, 0, firstWeekContainsDate);\n  firstWeekOfThisYear.setUTCHours(0, 0, 0, 0);\n  var startOfThisYear = startOfUTCWeek(firstWeekOfThisYear, dirtyOptions);\n\n  if (date.getTime() >= startOfNextYear.getTime()) {\n    return year + 1;\n  } else if (date.getTime() >= startOfThisYear.getTime()) {\n    return year;\n  } else {\n    return year - 1;\n  }\n}","import getUTCWeekYear from \"../getUTCWeekYear/index.js\";\nimport requiredArgs from \"../requiredArgs/index.js\";\nimport startOfUTCWeek from \"../startOfUTCWeek/index.js\";\nimport toInteger from \"../toInteger/index.js\"; // This function will be a part of public API when UTC function will be implemented.\n// See issue: https://github.com/date-fns/date-fns/issues/376\n\nexport default function startOfUTCWeekYear(dirtyDate, dirtyOptions) {\n  requiredArgs(1, arguments);\n  var options = dirtyOptions || {};\n  var locale = options.locale;\n  var localeFirstWeekContainsDate = locale && locale.options && locale.options.firstWeekContainsDate;\n  var defaultFirstWeekContainsDate = localeFirstWeekContainsDate == null ? 1 : toInteger(localeFirstWeekContainsDate);\n  var firstWeekContainsDate = options.firstWeekContainsDate == null ? defaultFirstWeekContainsDate : toInteger(options.firstWeekContainsDate);\n  var year = getUTCWeekYear(dirtyDate, dirtyOptions);\n  var firstWeek = new Date(0);\n  firstWeek.setUTCFullYear(year, 0, firstWeekContainsDate);\n  firstWeek.setUTCHours(0, 0, 0, 0);\n  var date = startOfUTCWeek(firstWeek, dirtyOptions);\n  return date;\n}","import toDate from \"../../toDate/index.js\";\nimport startOfUTCWeek from \"../startOfUTCWeek/index.js\";\nimport startOfUTCWeekYear from \"../startOfUTCWeekYear/index.js\";\nimport requiredArgs from \"../requiredArgs/index.js\";\nvar MILLISECONDS_IN_WEEK = 604800000; // This function will be a part of public API when UTC function will be implemented.\n// See issue: https://github.com/date-fns/date-fns/issues/376\n\nexport default function getUTCWeek(dirtyDate, options) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  var diff = startOfUTCWeek(date, options).getTime() - startOfUTCWeekYear(date, options).getTime(); // Round the number of days to the nearest integer\n  // because the number of milliseconds in a week is not constant\n  // (e.g. it's different in the week of the daylight saving time clock shift)\n\n  return Math.round(diff / MILLISECONDS_IN_WEEK) + 1;\n}","export default function addLeadingZeros(number, targetLength) {\n  var sign = number < 0 ? '-' : '';\n  var output = Math.abs(number).toString();\n\n  while (output.length < targetLength) {\n    output = '0' + output;\n  }\n\n  return sign + output;\n}","import addLeadingZeros from \"../../addLeadingZeros/index.js\";\n/*\n * |     | Unit                           |     | Unit                           |\n * |-----|--------------------------------|-----|--------------------------------|\n * |  a  | AM, PM                         |  A* |                                |\n * |  d  | Day of month                   |  D  |                                |\n * |  h  | Hour [1-12]                    |  H  | Hour [0-23]                    |\n * |  m  | Minute                         |  M  | Month                          |\n * |  s  | Second                         |  S  | Fraction of second             |\n * |  y  | Year (abs)                     |  Y  |                                |\n *\n * Letters marked by * are not implemented but reserved by Unicode standard.\n */\n\nvar formatters = {\n  // Year\n  y: function (date, token) {\n    // From http://www.unicode.org/reports/tr35/tr35-31/tr35-dates.html#Date_Format_tokens\n    // | Year     |     y | yy |   yyy |  yyyy | yyyyy |\n    // |----------|-------|----|-------|-------|-------|\n    // | AD 1     |     1 | 01 |   001 |  0001 | 00001 |\n    // | AD 12    |    12 | 12 |   012 |  0012 | 00012 |\n    // | AD 123   |   123 | 23 |   123 |  0123 | 00123 |\n    // | AD 1234  |  1234 | 34 |  1234 |  1234 | 01234 |\n    // | AD 12345 | 12345 | 45 | 12345 | 12345 | 12345 |\n    var signedYear = date.getUTCFullYear(); // Returns 1 for 1 BC (which is year 0 in JavaScript)\n\n    var year = signedYear > 0 ? signedYear : 1 - signedYear;\n    return addLeadingZeros(token === 'yy' ? year % 100 : year, token.length);\n  },\n  // Month\n  M: function (date, token) {\n    var month = date.getUTCMonth();\n    return token === 'M' ? String(month + 1) : addLeadingZeros(month + 1, 2);\n  },\n  // Day of the month\n  d: function (date, token) {\n    return addLeadingZeros(date.getUTCDate(), token.length);\n  },\n  // AM or PM\n  a: function (date, token) {\n    var dayPeriodEnumValue = date.getUTCHours() / 12 >= 1 ? 'pm' : 'am';\n\n    switch (token) {\n      case 'a':\n      case 'aa':\n        return dayPeriodEnumValue.toUpperCase();\n\n      case 'aaa':\n        return dayPeriodEnumValue;\n\n      case 'aaaaa':\n        return dayPeriodEnumValue[0];\n\n      case 'aaaa':\n      default:\n        return dayPeriodEnumValue === 'am' ? 'a.m.' : 'p.m.';\n    }\n  },\n  // Hour [1-12]\n  h: function (date, token) {\n    return addLeadingZeros(date.getUTCHours() % 12 || 12, token.length);\n  },\n  // Hour [0-23]\n  H: function (date, token) {\n    return addLeadingZeros(date.getUTCHours(), token.length);\n  },\n  // Minute\n  m: function (date, token) {\n    return addLeadingZeros(date.getUTCMinutes(), token.length);\n  },\n  // Second\n  s: function (date, token) {\n    return addLeadingZeros(date.getUTCSeconds(), token.length);\n  },\n  // Fraction of second\n  S: function (date, token) {\n    var numberOfDigits = token.length;\n    var milliseconds = date.getUTCMilliseconds();\n    var fractionalSeconds = Math.floor(milliseconds * Math.pow(10, numberOfDigits - 3));\n    return addLeadingZeros(fractionalSeconds, token.length);\n  }\n};\nexport default formatters;","import getUTCDayOfYear from \"../../../_lib/getUTCDayOfYear/index.js\";\nimport getUTCISOWeek from \"../../../_lib/getUTCISOWeek/index.js\";\nimport getUTCISOWeekYear from \"../../../_lib/getUTCISOWeekYear/index.js\";\nimport getUTCWeek from \"../../../_lib/getUTCWeek/index.js\";\nimport getUTCWeekYear from \"../../../_lib/getUTCWeekYear/index.js\";\nimport addLeadingZeros from \"../../addLeadingZeros/index.js\";\nimport lightFormatters from \"../lightFormatters/index.js\";\nvar dayPeriodEnum = {\n  am: 'am',\n  pm: 'pm',\n  midnight: 'midnight',\n  noon: 'noon',\n  morning: 'morning',\n  afternoon: 'afternoon',\n  evening: 'evening',\n  night: 'night'\n};\n/*\n * |     | Unit                           |     | Unit                           |\n * |-----|--------------------------------|-----|--------------------------------|\n * |  a  | AM, PM                         |  A* | Milliseconds in day            |\n * |  b  | AM, PM, noon, midnight         |  B  | Flexible day period            |\n * |  c  | Stand-alone local day of week  |  C* | Localized hour w/ day period   |\n * |  d  | Day of month                   |  D  | Day of year                    |\n * |  e  | Local day of week              |  E  | Day of week                    |\n * |  f  |                                |  F* | Day of week in month           |\n * |  g* | Modified Julian day            |  G  | Era                            |\n * |  h  | Hour [1-12]                    |  H  | Hour [0-23]                    |\n * |  i! | ISO day of week                |  I! | ISO week of year               |\n * |  j* | Localized hour w/ day period   |  J* | Localized hour w/o day period  |\n * |  k  | Hour [1-24]                    |  K  | Hour [0-11]                    |\n * |  l* | (deprecated)                   |  L  | Stand-alone month              |\n * |  m  | Minute                         |  M  | Month                          |\n * |  n  |                                |  N  |                                |\n * |  o! | Ordinal number modifier        |  O  | Timezone (GMT)                 |\n * |  p! | Long localized time            |  P! | Long localized date            |\n * |  q  | Stand-alone quarter            |  Q  | Quarter                        |\n * |  r* | Related Gregorian year         |  R! | ISO week-numbering year        |\n * |  s  | Second                         |  S  | Fraction of second             |\n * |  t! | Seconds timestamp              |  T! | Milliseconds timestamp         |\n * |  u  | Extended year                  |  U* | Cyclic year                    |\n * |  v* | Timezone (generic non-locat.)  |  V* | Timezone (location)            |\n * |  w  | Local week of year             |  W* | Week of month                  |\n * |  x  | Timezone (ISO-8601 w/o Z)      |  X  | Timezone (ISO-8601)            |\n * |  y  | Year (abs)                     |  Y  | Local week-numbering year      |\n * |  z  | Timezone (specific non-locat.) |  Z* | Timezone (aliases)             |\n *\n * Letters marked by * are not implemented but reserved by Unicode standard.\n *\n * Letters marked by ! are non-standard, but implemented by date-fns:\n * - `o` modifies the previous token to turn it into an ordinal (see `format` docs)\n * - `i` is ISO day of week. For `i` and `ii` is returns numeric ISO week days,\n *   i.e. 7 for Sunday, 1 for Monday, etc.\n * - `I` is ISO week of year, as opposed to `w` which is local week of year.\n * - `R` is ISO week-numbering year, as opposed to `Y` which is local week-numbering year.\n *   `R` is supposed to be used in conjunction with `I` and `i`\n *   for universal ISO week-numbering date, whereas\n *   `Y` is supposed to be used in conjunction with `w` and `e`\n *   for week-numbering date specific to the locale.\n * - `P` is long localized date format\n * - `p` is long localized time format\n */\n\nvar formatters = {\n  // Era\n  G: function (date, token, localize) {\n    var era = date.getUTCFullYear() > 0 ? 1 : 0;\n\n    switch (token) {\n      // AD, BC\n      case 'G':\n      case 'GG':\n      case 'GGG':\n        return localize.era(era, {\n          width: 'abbreviated'\n        });\n      // A, B\n\n      case 'GGGGG':\n        return localize.era(era, {\n          width: 'narrow'\n        });\n      // Anno Domini, Before Christ\n\n      case 'GGGG':\n      default:\n        return localize.era(era, {\n          width: 'wide'\n        });\n    }\n  },\n  // Year\n  y: function (date, token, localize) {\n    // Ordinal number\n    if (token === 'yo') {\n      var signedYear = date.getUTCFullYear(); // Returns 1 for 1 BC (which is year 0 in JavaScript)\n\n      var year = signedYear > 0 ? signedYear : 1 - signedYear;\n      return localize.ordinalNumber(year, {\n        unit: 'year'\n      });\n    }\n\n    return lightFormatters.y(date, token);\n  },\n  // Local week-numbering year\n  Y: function (date, token, localize, options) {\n    var signedWeekYear = getUTCWeekYear(date, options); // Returns 1 for 1 BC (which is year 0 in JavaScript)\n\n    var weekYear = signedWeekYear > 0 ? signedWeekYear : 1 - signedWeekYear; // Two digit year\n\n    if (token === 'YY') {\n      var twoDigitYear = weekYear % 100;\n      return addLeadingZeros(twoDigitYear, 2);\n    } // Ordinal number\n\n\n    if (token === 'Yo') {\n      return localize.ordinalNumber(weekYear, {\n        unit: 'year'\n      });\n    } // Padding\n\n\n    return addLeadingZeros(weekYear, token.length);\n  },\n  // ISO week-numbering year\n  R: function (date, token) {\n    var isoWeekYear = getUTCISOWeekYear(date); // Padding\n\n    return addLeadingZeros(isoWeekYear, token.length);\n  },\n  // Extended year. This is a single number designating the year of this calendar system.\n  // The main difference between `y` and `u` localizers are B.C. years:\n  // | Year | `y` | `u` |\n  // |------|-----|-----|\n  // | AC 1 |   1 |   1 |\n  // | BC 1 |   1 |   0 |\n  // | BC 2 |   2 |  -1 |\n  // Also `yy` always returns the last two digits of a year,\n  // while `uu` pads single digit years to 2 characters and returns other years unchanged.\n  u: function (date, token) {\n    var year = date.getUTCFullYear();\n    return addLeadingZeros(year, token.length);\n  },\n  // Quarter\n  Q: function (date, token, localize) {\n    var quarter = Math.ceil((date.getUTCMonth() + 1) / 3);\n\n    switch (token) {\n      // 1, 2, 3, 4\n      case 'Q':\n        return String(quarter);\n      // 01, 02, 03, 04\n\n      case 'QQ':\n        return addLeadingZeros(quarter, 2);\n      // 1st, 2nd, 3rd, 4th\n\n      case 'Qo':\n        return localize.ordinalNumber(quarter, {\n          unit: 'quarter'\n        });\n      // Q1, Q2, Q3, Q4\n\n      case 'QQQ':\n        return localize.quarter(quarter, {\n          width: 'abbreviated',\n          context: 'formatting'\n        });\n      // 1, 2, 3, 4 (narrow quarter; could be not numerical)\n\n      case 'QQQQQ':\n        return localize.quarter(quarter, {\n          width: 'narrow',\n          context: 'formatting'\n        });\n      // 1st quarter, 2nd quarter, ...\n\n      case 'QQQQ':\n      default:\n        return localize.quarter(quarter, {\n          width: 'wide',\n          context: 'formatting'\n        });\n    }\n  },\n  // Stand-alone quarter\n  q: function (date, token, localize) {\n    var quarter = Math.ceil((date.getUTCMonth() + 1) / 3);\n\n    switch (token) {\n      // 1, 2, 3, 4\n      case 'q':\n        return String(quarter);\n      // 01, 02, 03, 04\n\n      case 'qq':\n        return addLeadingZeros(quarter, 2);\n      // 1st, 2nd, 3rd, 4th\n\n      case 'qo':\n        return localize.ordinalNumber(quarter, {\n          unit: 'quarter'\n        });\n      // Q1, Q2, Q3, Q4\n\n      case 'qqq':\n        return localize.quarter(quarter, {\n          width: 'abbreviated',\n          context: 'standalone'\n        });\n      // 1, 2, 3, 4 (narrow quarter; could be not numerical)\n\n      case 'qqqqq':\n        return localize.quarter(quarter, {\n          width: 'narrow',\n          context: 'standalone'\n        });\n      // 1st quarter, 2nd quarter, ...\n\n      case 'qqqq':\n      default:\n        return localize.quarter(quarter, {\n          width: 'wide',\n          context: 'standalone'\n        });\n    }\n  },\n  // Month\n  M: function (date, token, localize) {\n    var month = date.getUTCMonth();\n\n    switch (token) {\n      case 'M':\n      case 'MM':\n        return lightFormatters.M(date, token);\n      // 1st, 2nd, ..., 12th\n\n      case 'Mo':\n        return localize.ordinalNumber(month + 1, {\n          unit: 'month'\n        });\n      // Jan, Feb, ..., Dec\n\n      case 'MMM':\n        return localize.month(month, {\n          width: 'abbreviated',\n          context: 'formatting'\n        });\n      // J, F, ..., D\n\n      case 'MMMMM':\n        return localize.month(month, {\n          width: 'narrow',\n          context: 'formatting'\n        });\n      // January, February, ..., December\n\n      case 'MMMM':\n      default:\n        return localize.month(month, {\n          width: 'wide',\n          context: 'formatting'\n        });\n    }\n  },\n  // Stand-alone month\n  L: function (date, token, localize) {\n    var month = date.getUTCMonth();\n\n    switch (token) {\n      // 1, 2, ..., 12\n      case 'L':\n        return String(month + 1);\n      // 01, 02, ..., 12\n\n      case 'LL':\n        return addLeadingZeros(month + 1, 2);\n      // 1st, 2nd, ..., 12th\n\n      case 'Lo':\n        return localize.ordinalNumber(month + 1, {\n          unit: 'month'\n        });\n      // Jan, Feb, ..., Dec\n\n      case 'LLL':\n        return localize.month(month, {\n          width: 'abbreviated',\n          context: 'standalone'\n        });\n      // J, F, ..., D\n\n      case 'LLLLL':\n        return localize.month(month, {\n          width: 'narrow',\n          context: 'standalone'\n        });\n      // January, February, ..., December\n\n      case 'LLLL':\n      default:\n        return localize.month(month, {\n          width: 'wide',\n          context: 'standalone'\n        });\n    }\n  },\n  // Local week of year\n  w: function (date, token, localize, options) {\n    var week = getUTCWeek(date, options);\n\n    if (token === 'wo') {\n      return localize.ordinalNumber(week, {\n        unit: 'week'\n      });\n    }\n\n    return addLeadingZeros(week, token.length);\n  },\n  // ISO week of year\n  I: function (date, token, localize) {\n    var isoWeek = getUTCISOWeek(date);\n\n    if (token === 'Io') {\n      return localize.ordinalNumber(isoWeek, {\n        unit: 'week'\n      });\n    }\n\n    return addLeadingZeros(isoWeek, token.length);\n  },\n  // Day of the month\n  d: function (date, token, localize) {\n    if (token === 'do') {\n      return localize.ordinalNumber(date.getUTCDate(), {\n        unit: 'date'\n      });\n    }\n\n    return lightFormatters.d(date, token);\n  },\n  // Day of year\n  D: function (date, token, localize) {\n    var dayOfYear = getUTCDayOfYear(date);\n\n    if (token === 'Do') {\n      return localize.ordinalNumber(dayOfYear, {\n        unit: 'dayOfYear'\n      });\n    }\n\n    return addLeadingZeros(dayOfYear, token.length);\n  },\n  // Day of week\n  E: function (date, token, localize) {\n    var dayOfWeek = date.getUTCDay();\n\n    switch (token) {\n      // Tue\n      case 'E':\n      case 'EE':\n      case 'EEE':\n        return localize.day(dayOfWeek, {\n          width: 'abbreviated',\n          context: 'formatting'\n        });\n      // T\n\n      case 'EEEEE':\n        return localize.day(dayOfWeek, {\n          width: 'narrow',\n          context: 'formatting'\n        });\n      // Tu\n\n      case 'EEEEEE':\n        return localize.day(dayOfWeek, {\n          width: 'short',\n          context: 'formatting'\n        });\n      // Tuesday\n\n      case 'EEEE':\n      default:\n        return localize.day(dayOfWeek, {\n          width: 'wide',\n          context: 'formatting'\n        });\n    }\n  },\n  // Local day of week\n  e: function (date, token, localize, options) {\n    var dayOfWeek = date.getUTCDay();\n    var localDayOfWeek = (dayOfWeek - options.weekStartsOn + 8) % 7 || 7;\n\n    switch (token) {\n      // Numerical value (Nth day of week with current locale or weekStartsOn)\n      case 'e':\n        return String(localDayOfWeek);\n      // Padded numerical value\n\n      case 'ee':\n        return addLeadingZeros(localDayOfWeek, 2);\n      // 1st, 2nd, ..., 7th\n\n      case 'eo':\n        return localize.ordinalNumber(localDayOfWeek, {\n          unit: 'day'\n        });\n\n      case 'eee':\n        return localize.day(dayOfWeek, {\n          width: 'abbreviated',\n          context: 'formatting'\n        });\n      // T\n\n      case 'eeeee':\n        return localize.day(dayOfWeek, {\n          width: 'narrow',\n          context: 'formatting'\n        });\n      // Tu\n\n      case 'eeeeee':\n        return localize.day(dayOfWeek, {\n          width: 'short',\n          context: 'formatting'\n        });\n      // Tuesday\n\n      case 'eeee':\n      default:\n        return localize.day(dayOfWeek, {\n          width: 'wide',\n          context: 'formatting'\n        });\n    }\n  },\n  // Stand-alone local day of week\n  c: function (date, token, localize, options) {\n    var dayOfWeek = date.getUTCDay();\n    var localDayOfWeek = (dayOfWeek - options.weekStartsOn + 8) % 7 || 7;\n\n    switch (token) {\n      // Numerical value (same as in `e`)\n      case 'c':\n        return String(localDayOfWeek);\n      // Padded numerical value\n\n      case 'cc':\n        return addLeadingZeros(localDayOfWeek, token.length);\n      // 1st, 2nd, ..., 7th\n\n      case 'co':\n        return localize.ordinalNumber(localDayOfWeek, {\n          unit: 'day'\n        });\n\n      case 'ccc':\n        return localize.day(dayOfWeek, {\n          width: 'abbreviated',\n          context: 'standalone'\n        });\n      // T\n\n      case 'ccccc':\n        return localize.day(dayOfWeek, {\n          width: 'narrow',\n          context: 'standalone'\n        });\n      // Tu\n\n      case 'cccccc':\n        return localize.day(dayOfWeek, {\n          width: 'short',\n          context: 'standalone'\n        });\n      // Tuesday\n\n      case 'cccc':\n      default:\n        return localize.day(dayOfWeek, {\n          width: 'wide',\n          context: 'standalone'\n        });\n    }\n  },\n  // ISO day of week\n  i: function (date, token, localize) {\n    var dayOfWeek = date.getUTCDay();\n    var isoDayOfWeek = dayOfWeek === 0 ? 7 : dayOfWeek;\n\n    switch (token) {\n      // 2\n      case 'i':\n        return String(isoDayOfWeek);\n      // 02\n\n      case 'ii':\n        return addLeadingZeros(isoDayOfWeek, token.length);\n      // 2nd\n\n      case 'io':\n        return localize.ordinalNumber(isoDayOfWeek, {\n          unit: 'day'\n        });\n      // Tue\n\n      case 'iii':\n        return localize.day(dayOfWeek, {\n          width: 'abbreviated',\n          context: 'formatting'\n        });\n      // T\n\n      case 'iiiii':\n        return localize.day(dayOfWeek, {\n          width: 'narrow',\n          context: 'formatting'\n        });\n      // Tu\n\n      case 'iiiiii':\n        return localize.day(dayOfWeek, {\n          width: 'short',\n          context: 'formatting'\n        });\n      // Tuesday\n\n      case 'iiii':\n      default:\n        return localize.day(dayOfWeek, {\n          width: 'wide',\n          context: 'formatting'\n        });\n    }\n  },\n  // AM or PM\n  a: function (date, token, localize) {\n    var hours = date.getUTCHours();\n    var dayPeriodEnumValue = hours / 12 >= 1 ? 'pm' : 'am';\n\n    switch (token) {\n      case 'a':\n      case 'aa':\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: 'abbreviated',\n          context: 'formatting'\n        });\n\n      case 'aaa':\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: 'abbreviated',\n          context: 'formatting'\n        }).toLowerCase();\n\n      case 'aaaaa':\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: 'narrow',\n          context: 'formatting'\n        });\n\n      case 'aaaa':\n      default:\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: 'wide',\n          context: 'formatting'\n        });\n    }\n  },\n  // AM, PM, midnight, noon\n  b: function (date, token, localize) {\n    var hours = date.getUTCHours();\n    var dayPeriodEnumValue;\n\n    if (hours === 12) {\n      dayPeriodEnumValue = dayPeriodEnum.noon;\n    } else if (hours === 0) {\n      dayPeriodEnumValue = dayPeriodEnum.midnight;\n    } else {\n      dayPeriodEnumValue = hours / 12 >= 1 ? 'pm' : 'am';\n    }\n\n    switch (token) {\n      case 'b':\n      case 'bb':\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: 'abbreviated',\n          context: 'formatting'\n        });\n\n      case 'bbb':\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: 'abbreviated',\n          context: 'formatting'\n        }).toLowerCase();\n\n      case 'bbbbb':\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: 'narrow',\n          context: 'formatting'\n        });\n\n      case 'bbbb':\n      default:\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: 'wide',\n          context: 'formatting'\n        });\n    }\n  },\n  // in the morning, in the afternoon, in the evening, at night\n  B: function (date, token, localize) {\n    var hours = date.getUTCHours();\n    var dayPeriodEnumValue;\n\n    if (hours >= 17) {\n      dayPeriodEnumValue = dayPeriodEnum.evening;\n    } else if (hours >= 12) {\n      dayPeriodEnumValue = dayPeriodEnum.afternoon;\n    } else if (hours >= 4) {\n      dayPeriodEnumValue = dayPeriodEnum.morning;\n    } else {\n      dayPeriodEnumValue = dayPeriodEnum.night;\n    }\n\n    switch (token) {\n      case 'B':\n      case 'BB':\n      case 'BBB':\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: 'abbreviated',\n          context: 'formatting'\n        });\n\n      case 'BBBBB':\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: 'narrow',\n          context: 'formatting'\n        });\n\n      case 'BBBB':\n      default:\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: 'wide',\n          context: 'formatting'\n        });\n    }\n  },\n  // Hour [1-12]\n  h: function (date, token, localize) {\n    if (token === 'ho') {\n      var hours = date.getUTCHours() % 12;\n      if (hours === 0) hours = 12;\n      return localize.ordinalNumber(hours, {\n        unit: 'hour'\n      });\n    }\n\n    return lightFormatters.h(date, token);\n  },\n  // Hour [0-23]\n  H: function (date, token, localize) {\n    if (token === 'Ho') {\n      return localize.ordinalNumber(date.getUTCHours(), {\n        unit: 'hour'\n      });\n    }\n\n    return lightFormatters.H(date, token);\n  },\n  // Hour [0-11]\n  K: function (date, token, localize) {\n    var hours = date.getUTCHours() % 12;\n\n    if (token === 'Ko') {\n      return localize.ordinalNumber(hours, {\n        unit: 'hour'\n      });\n    }\n\n    return addLeadingZeros(hours, token.length);\n  },\n  // Hour [1-24]\n  k: function (date, token, localize) {\n    var hours = date.getUTCHours();\n    if (hours === 0) hours = 24;\n\n    if (token === 'ko') {\n      return localize.ordinalNumber(hours, {\n        unit: 'hour'\n      });\n    }\n\n    return addLeadingZeros(hours, token.length);\n  },\n  // Minute\n  m: function (date, token, localize) {\n    if (token === 'mo') {\n      return localize.ordinalNumber(date.getUTCMinutes(), {\n        unit: 'minute'\n      });\n    }\n\n    return lightFormatters.m(date, token);\n  },\n  // Second\n  s: function (date, token, localize) {\n    if (token === 'so') {\n      return localize.ordinalNumber(date.getUTCSeconds(), {\n        unit: 'second'\n      });\n    }\n\n    return lightFormatters.s(date, token);\n  },\n  // Fraction of second\n  S: function (date, token) {\n    return lightFormatters.S(date, token);\n  },\n  // Timezone (ISO-8601. If offset is 0, output is always `'Z'`)\n  X: function (date, token, _localize, options) {\n    var originalDate = options._originalDate || date;\n    var timezoneOffset = originalDate.getTimezoneOffset();\n\n    if (timezoneOffset === 0) {\n      return 'Z';\n    }\n\n    switch (token) {\n      // Hours and optional minutes\n      case 'X':\n        return formatTimezoneWithOptionalMinutes(timezoneOffset);\n      // Hours, minutes and optional seconds without `:` delimiter\n      // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets\n      // so this token always has the same output as `XX`\n\n      case 'XXXX':\n      case 'XX':\n        // Hours and minutes without `:` delimiter\n        return formatTimezone(timezoneOffset);\n      // Hours, minutes and optional seconds with `:` delimiter\n      // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets\n      // so this token always has the same output as `XXX`\n\n      case 'XXXXX':\n      case 'XXX': // Hours and minutes with `:` delimiter\n\n      default:\n        return formatTimezone(timezoneOffset, ':');\n    }\n  },\n  // Timezone (ISO-8601. If offset is 0, output is `'+00:00'` or equivalent)\n  x: function (date, token, _localize, options) {\n    var originalDate = options._originalDate || date;\n    var timezoneOffset = originalDate.getTimezoneOffset();\n\n    switch (token) {\n      // Hours and optional minutes\n      case 'x':\n        return formatTimezoneWithOptionalMinutes(timezoneOffset);\n      // Hours, minutes and optional seconds without `:` delimiter\n      // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets\n      // so this token always has the same output as `xx`\n\n      case 'xxxx':\n      case 'xx':\n        // Hours and minutes without `:` delimiter\n        return formatTimezone(timezoneOffset);\n      // Hours, minutes and optional seconds with `:` delimiter\n      // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets\n      // so this token always has the same output as `xxx`\n\n      case 'xxxxx':\n      case 'xxx': // Hours and minutes with `:` delimiter\n\n      default:\n        return formatTimezone(timezoneOffset, ':');\n    }\n  },\n  // Timezone (GMT)\n  O: function (date, token, _localize, options) {\n    var originalDate = options._originalDate || date;\n    var timezoneOffset = originalDate.getTimezoneOffset();\n\n    switch (token) {\n      // Short\n      case 'O':\n      case 'OO':\n      case 'OOO':\n        return 'GMT' + formatTimezoneShort(timezoneOffset, ':');\n      // Long\n\n      case 'OOOO':\n      default:\n        return 'GMT' + formatTimezone(timezoneOffset, ':');\n    }\n  },\n  // Timezone (specific non-location)\n  z: function (date, token, _localize, options) {\n    var originalDate = options._originalDate || date;\n    var timezoneOffset = originalDate.getTimezoneOffset();\n\n    switch (token) {\n      // Short\n      case 'z':\n      case 'zz':\n      case 'zzz':\n        return 'GMT' + formatTimezoneShort(timezoneOffset, ':');\n      // Long\n\n      case 'zzzz':\n      default:\n        return 'GMT' + formatTimezone(timezoneOffset, ':');\n    }\n  },\n  // Seconds timestamp\n  t: function (date, token, _localize, options) {\n    var originalDate = options._originalDate || date;\n    var timestamp = Math.floor(originalDate.getTime() / 1000);\n    return addLeadingZeros(timestamp, token.length);\n  },\n  // Milliseconds timestamp\n  T: function (date, token, _localize, options) {\n    var originalDate = options._originalDate || date;\n    var timestamp = originalDate.getTime();\n    return addLeadingZeros(timestamp, token.length);\n  }\n};\n\nfunction formatTimezoneShort(offset, dirtyDelimiter) {\n  var sign = offset > 0 ? '-' : '+';\n  var absOffset = Math.abs(offset);\n  var hours = Math.floor(absOffset / 60);\n  var minutes = absOffset % 60;\n\n  if (minutes === 0) {\n    return sign + String(hours);\n  }\n\n  var delimiter = dirtyDelimiter || '';\n  return sign + String(hours) + delimiter + addLeadingZeros(minutes, 2);\n}\n\nfunction formatTimezoneWithOptionalMinutes(offset, dirtyDelimiter) {\n  if (offset % 60 === 0) {\n    var sign = offset > 0 ? '-' : '+';\n    return sign + addLeadingZeros(Math.abs(offset) / 60, 2);\n  }\n\n  return formatTimezone(offset, dirtyDelimiter);\n}\n\nfunction formatTimezone(offset, dirtyDelimiter) {\n  var delimiter = dirtyDelimiter || '';\n  var sign = offset > 0 ? '-' : '+';\n  var absOffset = Math.abs(offset);\n  var hours = addLeadingZeros(Math.floor(absOffset / 60), 2);\n  var minutes = addLeadingZeros(absOffset % 60, 2);\n  return sign + hours + delimiter + minutes;\n}\n\nexport default formatters;","function dateLongFormatter(pattern, formatLong) {\n  switch (pattern) {\n    case 'P':\n      return formatLong.date({\n        width: 'short'\n      });\n\n    case 'PP':\n      return formatLong.date({\n        width: 'medium'\n      });\n\n    case 'PPP':\n      return formatLong.date({\n        width: 'long'\n      });\n\n    case 'PPPP':\n    default:\n      return formatLong.date({\n        width: 'full'\n      });\n  }\n}\n\nfunction timeLongFormatter(pattern, formatLong) {\n  switch (pattern) {\n    case 'p':\n      return formatLong.time({\n        width: 'short'\n      });\n\n    case 'pp':\n      return formatLong.time({\n        width: 'medium'\n      });\n\n    case 'ppp':\n      return formatLong.time({\n        width: 'long'\n      });\n\n    case 'pppp':\n    default:\n      return formatLong.time({\n        width: 'full'\n      });\n  }\n}\n\nfunction dateTimeLongFormatter(pattern, formatLong) {\n  var matchResult = pattern.match(/(P+)(p+)?/) || [];\n  var datePattern = matchResult[1];\n  var timePattern = matchResult[2];\n\n  if (!timePattern) {\n    return dateLongFormatter(pattern, formatLong);\n  }\n\n  var dateTimeFormat;\n\n  switch (datePattern) {\n    case 'P':\n      dateTimeFormat = formatLong.dateTime({\n        width: 'short'\n      });\n      break;\n\n    case 'PP':\n      dateTimeFormat = formatLong.dateTime({\n        width: 'medium'\n      });\n      break;\n\n    case 'PPP':\n      dateTimeFormat = formatLong.dateTime({\n        width: 'long'\n      });\n      break;\n\n    case 'PPPP':\n    default:\n      dateTimeFormat = formatLong.dateTime({\n        width: 'full'\n      });\n      break;\n  }\n\n  return dateTimeFormat.replace('{{date}}', dateLongFormatter(datePattern, formatLong)).replace('{{time}}', timeLongFormatter(timePattern, formatLong));\n}\n\nvar longFormatters = {\n  p: timeLongFormatter,\n  P: dateTimeLongFormatter\n};\nexport default longFormatters;","/**\n * Google Chrome as of 67.0.3396.87 introduced timezones with offset that includes seconds.\n * They usually appear for dates that denote time before the timezones were introduced\n * (e.g. for 'Europe/Prague' timezone the offset is GMT+00:57:44 before 1 October 1891\n * and GMT+01:00:00 after that date)\n *\n * Date#getTimezoneOffset returns the offset in minutes and would return 57 for the example above,\n * which would lead to incorrect calculations.\n *\n * This function returns the timezone offset in milliseconds that takes seconds in account.\n */\nexport default function getTimezoneOffsetInMilliseconds(date) {\n  var utcDate = new Date(Date.UTC(date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(), date.getMinutes(), date.getSeconds(), date.getMilliseconds()));\n  utcDate.setUTCFullYear(date.getFullYear());\n  return date.getTime() - utcDate.getTime();\n}","var protectedDayOfYearTokens = ['D', 'DD'];\nvar protectedWeekYearTokens = ['YY', 'YYYY'];\nexport function isProtectedDayOfYearToken(token) {\n  return protectedDayOfYearTokens.indexOf(token) !== -1;\n}\nexport function isProtectedWeekYearToken(token) {\n  return protectedWeekYearTokens.indexOf(token) !== -1;\n}\nexport function throwProtectedError(token, format, input) {\n  if (token === 'YYYY') {\n    throw new RangeError(\"Use `yyyy` instead of `YYYY` (in `\".concat(format, \"`) for formatting years to the input `\").concat(input, \"`; see: https://git.io/fxCyr\"));\n  } else if (token === 'YY') {\n    throw new RangeError(\"Use `yy` instead of `YY` (in `\".concat(format, \"`) for formatting years to the input `\").concat(input, \"`; see: https://git.io/fxCyr\"));\n  } else if (token === 'D') {\n    throw new RangeError(\"Use `d` instead of `D` (in `\".concat(format, \"`) for formatting days of the month to the input `\").concat(input, \"`; see: https://git.io/fxCyr\"));\n  } else if (token === 'DD') {\n    throw new RangeError(\"Use `dd` instead of `DD` (in `\".concat(format, \"`) for formatting days of the month to the input `\").concat(input, \"`; see: https://git.io/fxCyr\"));\n  }\n}","import isValid from \"../isValid/index.js\";\nimport defaultLocale from \"../locale/en-US/index.js\";\nimport subMilliseconds from \"../subMilliseconds/index.js\";\nimport toDate from \"../toDate/index.js\";\nimport formatters from \"../_lib/format/formatters/index.js\";\nimport longFormatters from \"../_lib/format/longFormatters/index.js\";\nimport getTimezoneOffsetInMilliseconds from \"../_lib/getTimezoneOffsetInMilliseconds/index.js\";\nimport { isProtectedDayOfYearToken, isProtectedWeekYearToken, throwProtectedError } from \"../_lib/protectedTokens/index.js\";\nimport toInteger from \"../_lib/toInteger/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\"; // This RegExp consists of three parts separated by `|`:\n// - [yYQqMLwIdDecihHKkms]o matches any available ordinal number token\n//   (one of the certain letters followed by `o`)\n// - (\\w)\\1* matches any sequences of the same letter\n// - '' matches two quote characters in a row\n// - '(''|[^'])+('|$) matches anything surrounded by two quote characters ('),\n//   except a single quote symbol, which ends the sequence.\n//   Two quote characters do not end the sequence.\n//   If there is no matching single quote\n//   then the sequence will continue until the end of the string.\n// - . matches any single character unmatched by previous parts of the RegExps\n\nvar formattingTokensRegExp = /[yYQqMLwIdDecihHKkms]o|(\\w)\\1*|''|'(''|[^'])+('|$)|./g; // This RegExp catches symbols escaped by quotes, and also\n// sequences of symbols P, p, and the combinations like `PPPPPPPppppp`\n\nvar longFormattingTokensRegExp = /P+p+|P+|p+|''|'(''|[^'])+('|$)|./g;\nvar escapedStringRegExp = /^'([^]*?)'?$/;\nvar doubleQuoteRegExp = /''/g;\nvar unescapedLatinCharacterRegExp = /[a-zA-Z]/;\n/**\n * @name format\n * @category Common Helpers\n * @summary Format the date.\n *\n * @description\n * Return the formatted date string in the given format. The result may vary by locale.\n *\n * > ⚠️ Please note that the `format` tokens differ from Moment.js and other libraries.\n * > See: https://git.io/fxCyr\n *\n * The characters wrapped between two single quotes characters (') are escaped.\n * Two single quotes in a row, whether inside or outside a quoted sequence, represent a 'real' single quote.\n * (see the last example)\n *\n * Format of the string is based on Unicode Technical Standard #35:\n * https://www.unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table\n * with a few additions (see note 7 below the table).\n *\n * Accepted patterns:\n * | Unit                            | Pattern | Result examples                   | Notes |\n * |---------------------------------|---------|-----------------------------------|-------|\n * | Era                             | G..GGG  | AD, BC                            |       |\n * |                                 | GGGG    | Anno Domini, Before Christ        | 2     |\n * |                                 | GGGGG   | A, B                              |       |\n * | Calendar year                   | y       | 44, 1, 1900, 2017                 | 5     |\n * |                                 | yo      | 44th, 1st, 0th, 17th              | 5,7   |\n * |                                 | yy      | 44, 01, 00, 17                    | 5     |\n * |                                 | yyy     | 044, 001, 1900, 2017              | 5     |\n * |                                 | yyyy    | 0044, 0001, 1900, 2017            | 5     |\n * |                                 | yyyyy   | ...                               | 3,5   |\n * | Local week-numbering year       | Y       | 44, 1, 1900, 2017                 | 5     |\n * |                                 | Yo      | 44th, 1st, 1900th, 2017th         | 5,7   |\n * |                                 | YY      | 44, 01, 00, 17                    | 5,8   |\n * |                                 | YYY     | 044, 001, 1900, 2017              | 5     |\n * |                                 | YYYY    | 0044, 0001, 1900, 2017            | 5,8   |\n * |                                 | YYYYY   | ...                               | 3,5   |\n * | ISO week-numbering year         | R       | -43, 0, 1, 1900, 2017             | 5,7   |\n * |                                 | RR      | -43, 00, 01, 1900, 2017           | 5,7   |\n * |                                 | RRR     | -043, 000, 001, 1900, 2017        | 5,7   |\n * |                                 | RRRR    | -0043, 0000, 0001, 1900, 2017     | 5,7   |\n * |                                 | RRRRR   | ...                               | 3,5,7 |\n * | Extended year                   | u       | -43, 0, 1, 1900, 2017             | 5     |\n * |                                 | uu      | -43, 01, 1900, 2017               | 5     |\n * |                                 | uuu     | -043, 001, 1900, 2017             | 5     |\n * |                                 | uuuu    | -0043, 0001, 1900, 2017           | 5     |\n * |                                 | uuuuu   | ...                               | 3,5   |\n * | Quarter (formatting)            | Q       | 1, 2, 3, 4                        |       |\n * |                                 | Qo      | 1st, 2nd, 3rd, 4th                | 7     |\n * |                                 | QQ      | 01, 02, 03, 04                    |       |\n * |                                 | QQQ     | Q1, Q2, Q3, Q4                    |       |\n * |                                 | QQQQ    | 1st quarter, 2nd quarter, ...     | 2     |\n * |                                 | QQQQQ   | 1, 2, 3, 4                        | 4     |\n * | Quarter (stand-alone)           | q       | 1, 2, 3, 4                        |       |\n * |                                 | qo      | 1st, 2nd, 3rd, 4th                | 7     |\n * |                                 | qq      | 01, 02, 03, 04                    |       |\n * |                                 | qqq     | Q1, Q2, Q3, Q4                    |       |\n * |                                 | qqqq    | 1st quarter, 2nd quarter, ...     | 2     |\n * |                                 | qqqqq   | 1, 2, 3, 4                        | 4     |\n * | Month (formatting)              | M       | 1, 2, ..., 12                     |       |\n * |                                 | Mo      | 1st, 2nd, ..., 12th               | 7     |\n * |                                 | MM      | 01, 02, ..., 12                   |       |\n * |                                 | MMM     | Jan, Feb, ..., Dec                |       |\n * |                                 | MMMM    | January, February, ..., December  | 2     |\n * |                                 | MMMMM   | J, F, ..., D                      |       |\n * | Month (stand-alone)             | L       | 1, 2, ..., 12                     |       |\n * |                                 | Lo      | 1st, 2nd, ..., 12th               | 7     |\n * |                                 | LL      | 01, 02, ..., 12                   |       |\n * |                                 | LLL     | Jan, Feb, ..., Dec                |       |\n * |                                 | LLLL    | January, February, ..., December  | 2     |\n * |                                 | LLLLL   | J, F, ..., D                      |       |\n * | Local week of year              | w       | 1, 2, ..., 53                     |       |\n * |                                 | wo      | 1st, 2nd, ..., 53th               | 7     |\n * |                                 | ww      | 01, 02, ..., 53                   |       |\n * | ISO week of year                | I       | 1, 2, ..., 53                     | 7     |\n * |                                 | Io      | 1st, 2nd, ..., 53th               | 7     |\n * |                                 | II      | 01, 02, ..., 53                   | 7     |\n * | Day of month                    | d       | 1, 2, ..., 31                     |       |\n * |                                 | do      | 1st, 2nd, ..., 31st               | 7     |\n * |                                 | dd      | 01, 02, ..., 31                   |       |\n * | Day of year                     | D       | 1, 2, ..., 365, 366               | 9     |\n * |                                 | Do      | 1st, 2nd, ..., 365th, 366th       | 7     |\n * |                                 | DD      | 01, 02, ..., 365, 366             | 9     |\n * |                                 | DDD     | 001, 002, ..., 365, 366           |       |\n * |                                 | DDDD    | ...                               | 3     |\n * | Day of week (formatting)        | E..EEE  | Mon, Tue, Wed, ..., Sun           |       |\n * |                                 | EEEE    | Monday, Tuesday, ..., Sunday      | 2     |\n * |                                 | EEEEE   | M, T, W, T, F, S, S               |       |\n * |                                 | EEEEEE  | Mo, Tu, We, Th, Fr, Sa, Su        |       |\n * | ISO day of week (formatting)    | i       | 1, 2, 3, ..., 7                   | 7     |\n * |                                 | io      | 1st, 2nd, ..., 7th                | 7     |\n * |                                 | ii      | 01, 02, ..., 07                   | 7     |\n * |                                 | iii     | Mon, Tue, Wed, ..., Sun           | 7     |\n * |                                 | iiii    | Monday, Tuesday, ..., Sunday      | 2,7   |\n * |                                 | iiiii   | M, T, W, T, F, S, S               | 7     |\n * |                                 | iiiiii  | Mo, Tu, We, Th, Fr, Sa, Su        | 7     |\n * | Local day of week (formatting)  | e       | 2, 3, 4, ..., 1                   |       |\n * |                                 | eo      | 2nd, 3rd, ..., 1st                | 7     |\n * |                                 | ee      | 02, 03, ..., 01                   |       |\n * |                                 | eee     | Mon, Tue, Wed, ..., Sun           |       |\n * |                                 | eeee    | Monday, Tuesday, ..., Sunday      | 2     |\n * |                                 | eeeee   | M, T, W, T, F, S, S               |       |\n * |                                 | eeeeee  | Mo, Tu, We, Th, Fr, Sa, Su        |       |\n * | Local day of week (stand-alone) | c       | 2, 3, 4, ..., 1                   |       |\n * |                                 | co      | 2nd, 3rd, ..., 1st                | 7     |\n * |                                 | cc      | 02, 03, ..., 01                   |       |\n * |                                 | ccc     | Mon, Tue, Wed, ..., Sun           |       |\n * |                                 | cccc    | Monday, Tuesday, ..., Sunday      | 2     |\n * |                                 | ccccc   | M, T, W, T, F, S, S               |       |\n * |                                 | cccccc  | Mo, Tu, We, Th, Fr, Sa, Su        |       |\n * | AM, PM                          | a..aa   | AM, PM                            |       |\n * |                                 | aaa     | am, pm                            |       |\n * |                                 | aaaa    | a.m., p.m.                        | 2     |\n * |                                 | aaaaa   | a, p                              |       |\n * | AM, PM, noon, midnight          | b..bb   | AM, PM, noon, midnight            |       |\n * |                                 | bbb     | am, pm, noon, midnight            |       |\n * |                                 | bbbb    | a.m., p.m., noon, midnight        | 2     |\n * |                                 | bbbbb   | a, p, n, mi                       |       |\n * | Flexible day period             | B..BBB  | at night, in the morning, ...     |       |\n * |                                 | BBBB    | at night, in the morning, ...     | 2     |\n * |                                 | BBBBB   | at night, in the morning, ...     |       |\n * | Hour [1-12]                     | h       | 1, 2, ..., 11, 12                 |       |\n * |                                 | ho      | 1st, 2nd, ..., 11th, 12th         | 7     |\n * |                                 | hh      | 01, 02, ..., 11, 12               |       |\n * | Hour [0-23]                     | H       | 0, 1, 2, ..., 23                  |       |\n * |                                 | Ho      | 0th, 1st, 2nd, ..., 23rd          | 7     |\n * |                                 | HH      | 00, 01, 02, ..., 23               |       |\n * | Hour [0-11]                     | K       | 1, 2, ..., 11, 0                  |       |\n * |                                 | Ko      | 1st, 2nd, ..., 11th, 0th          | 7     |\n * |                                 | KK      | 01, 02, ..., 11, 00               |       |\n * | Hour [1-24]                     | k       | 24, 1, 2, ..., 23                 |       |\n * |                                 | ko      | 24th, 1st, 2nd, ..., 23rd         | 7     |\n * |                                 | kk      | 24, 01, 02, ..., 23               |       |\n * | Minute                          | m       | 0, 1, ..., 59                     |       |\n * |                                 | mo      | 0th, 1st, ..., 59th               | 7     |\n * |                                 | mm      | 00, 01, ..., 59                   |       |\n * | Second                          | s       | 0, 1, ..., 59                     |       |\n * |                                 | so      | 0th, 1st, ..., 59th               | 7     |\n * |                                 | ss      | 00, 01, ..., 59                   |       |\n * | Fraction of second              | S       | 0, 1, ..., 9                      |       |\n * |                                 | SS      | 00, 01, ..., 99                   |       |\n * |                                 | SSS     | 000, 001, ..., 999                |       |\n * |                                 | SSSS    | ...                               | 3     |\n * | Timezone (ISO-8601 w/ Z)        | X       | -08, +0530, Z                     |       |\n * |                                 | XX      | -0800, +0530, Z                   |       |\n * |                                 | XXX     | -08:00, +05:30, Z                 |       |\n * |                                 | XXXX    | -0800, +0530, Z, +123456          | 2     |\n * |                                 | XXXXX   | -08:00, +05:30, Z, +12:34:56      |       |\n * | Timezone (ISO-8601 w/o Z)       | x       | -08, +0530, +00                   |       |\n * |                                 | xx      | -0800, +0530, +0000               |       |\n * |                                 | xxx     | -08:00, +05:30, +00:00            | 2     |\n * |                                 | xxxx    | -0800, +0530, +0000, +123456      |       |\n * |                                 | xxxxx   | -08:00, +05:30, +00:00, +12:34:56 |       |\n * | Timezone (GMT)                  | O...OOO | GMT-8, GMT+5:30, GMT+0            |       |\n * |                                 | OOOO    | GMT-08:00, GMT+05:30, GMT+00:00   | 2     |\n * | Timezone (specific non-locat.)  | z...zzz | GMT-8, GMT+5:30, GMT+0            | 6     |\n * |                                 | zzzz    | GMT-08:00, GMT+05:30, GMT+00:00   | 2,6   |\n * | Seconds timestamp               | t       | 512969520                         | 7     |\n * |                                 | tt      | ...                               | 3,7   |\n * | Milliseconds timestamp          | T       | 512969520900                      | 7     |\n * |                                 | TT      | ...                               | 3,7   |\n * | Long localized date             | P       | 04/29/1453                        | 7     |\n * |                                 | PP      | Apr 29, 1453                      | 7     |\n * |                                 | PPP     | April 29th, 1453                  | 7     |\n * |                                 | PPPP    | Friday, April 29th, 1453          | 2,7   |\n * | Long localized time             | p       | 12:00 AM                          | 7     |\n * |                                 | pp      | 12:00:00 AM                       | 7     |\n * |                                 | ppp     | 12:00:00 AM GMT+2                 | 7     |\n * |                                 | pppp    | 12:00:00 AM GMT+02:00             | 2,7   |\n * | Combination of date and time    | Pp      | 04/29/1453, 12:00 AM              | 7     |\n * |                                 | PPpp    | Apr 29, 1453, 12:00:00 AM         | 7     |\n * |                                 | PPPppp  | April 29th, 1453 at ...           | 7     |\n * |                                 | PPPPpppp| Friday, April 29th, 1453 at ...   | 2,7   |\n * Notes:\n * 1. \"Formatting\" units (e.g. formatting quarter) in the default en-US locale\n *    are the same as \"stand-alone\" units, but are different in some languages.\n *    \"Formatting\" units are declined according to the rules of the language\n *    in the context of a date. \"Stand-alone\" units are always nominative singular:\n *\n *    `format(new Date(2017, 10, 6), 'do LLLL', {locale: cs}) //=> '6. listopad'`\n *\n *    `format(new Date(2017, 10, 6), 'do MMMM', {locale: cs}) //=> '6. listopadu'`\n *\n * 2. Any sequence of the identical letters is a pattern, unless it is escaped by\n *    the single quote characters (see below).\n *    If the sequence is longer than listed in table (e.g. `EEEEEEEEEEE`)\n *    the output will be the same as default pattern for this unit, usually\n *    the longest one (in case of ISO weekdays, `EEEE`). Default patterns for units\n *    are marked with \"2\" in the last column of the table.\n *\n *    `format(new Date(2017, 10, 6), 'MMM') //=> 'Nov'`\n *\n *    `format(new Date(2017, 10, 6), 'MMMM') //=> 'November'`\n *\n *    `format(new Date(2017, 10, 6), 'MMMMM') //=> 'N'`\n *\n *    `format(new Date(2017, 10, 6), 'MMMMMM') //=> 'November'`\n *\n *    `format(new Date(2017, 10, 6), 'MMMMMMM') //=> 'November'`\n *\n * 3. Some patterns could be unlimited length (such as `yyyyyyyy`).\n *    The output will be padded with zeros to match the length of the pattern.\n *\n *    `format(new Date(2017, 10, 6), 'yyyyyyyy') //=> '00002017'`\n *\n * 4. `QQQQQ` and `qqqqq` could be not strictly numerical in some locales.\n *    These tokens represent the shortest form of the quarter.\n *\n * 5. The main difference between `y` and `u` patterns are B.C. years:\n *\n *    | Year | `y` | `u` |\n *    |------|-----|-----|\n *    | AC 1 |   1 |   1 |\n *    | BC 1 |   1 |   0 |\n *    | BC 2 |   2 |  -1 |\n *\n *    Also `yy` always returns the last two digits of a year,\n *    while `uu` pads single digit years to 2 characters and returns other years unchanged:\n *\n *    | Year | `yy` | `uu` |\n *    |------|------|------|\n *    | 1    |   01 |   01 |\n *    | 14   |   14 |   14 |\n *    | 376  |   76 |  376 |\n *    | 1453 |   53 | 1453 |\n *\n *    The same difference is true for local and ISO week-numbering years (`Y` and `R`),\n *    except local week-numbering years are dependent on `options.weekStartsOn`\n *    and `options.firstWeekContainsDate` (compare [getISOWeekYear]{@link https://date-fns.org/docs/getISOWeekYear}\n *    and [getWeekYear]{@link https://date-fns.org/docs/getWeekYear}).\n *\n * 6. Specific non-location timezones are currently unavailable in `date-fns`,\n *    so right now these tokens fall back to GMT timezones.\n *\n * 7. These patterns are not in the Unicode Technical Standard #35:\n *    - `i`: ISO day of week\n *    - `I`: ISO week of year\n *    - `R`: ISO week-numbering year\n *    - `t`: seconds timestamp\n *    - `T`: milliseconds timestamp\n *    - `o`: ordinal number modifier\n *    - `P`: long localized date\n *    - `p`: long localized time\n *\n * 8. `YY` and `YYYY` tokens represent week-numbering years but they are often confused with years.\n *    You should enable `options.useAdditionalWeekYearTokens` to use them. See: https://git.io/fxCyr\n *\n * 9. `D` and `DD` tokens represent days of the year but they are often confused with days of the month.\n *    You should enable `options.useAdditionalDayOfYearTokens` to use them. See: https://git.io/fxCyr\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * - The second argument is now required for the sake of explicitness.\n *\n *   ```javascript\n *   // Before v2.0.0\n *   format(new Date(2016, 0, 1))\n *\n *   // v2.0.0 onward\n *   format(new Date(2016, 0, 1), \"yyyy-MM-dd'T'HH:mm:ss.SSSxxx\")\n *   ```\n *\n * - New format string API for `format` function\n *   which is based on [Unicode Technical Standard #35](https://www.unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table).\n *   See [this post](https://blog.date-fns.org/post/unicode-tokens-in-date-fns-v2-sreatyki91jg) for more details.\n *\n * - Characters are now escaped using single quote symbols (`'`) instead of square brackets.\n *\n * @param {Date|Number} date - the original date\n * @param {String} format - the string of tokens\n * @param {Object} [options] - an object with options.\n * @param {Locale} [options.locale=defaultLocale] - the locale object. See [Locale]{@link https://date-fns.org/docs/Locale}\n * @param {0|1|2|3|4|5|6} [options.weekStartsOn=0] - the index of the first day of the week (0 - Sunday)\n * @param {Number} [options.firstWeekContainsDate=1] - the day of January, which is\n * @param {Boolean} [options.useAdditionalWeekYearTokens=false] - if true, allows usage of the week-numbering year tokens `YY` and `YYYY`;\n *   see: https://git.io/fxCyr\n * @param {Boolean} [options.useAdditionalDayOfYearTokens=false] - if true, allows usage of the day of year tokens `D` and `DD`;\n *   see: https://git.io/fxCyr\n * @returns {String} the formatted date string\n * @throws {TypeError} 2 arguments required\n * @throws {RangeError} `date` must not be Invalid Date\n * @throws {RangeError} `options.locale` must contain `localize` property\n * @throws {RangeError} `options.locale` must contain `formatLong` property\n * @throws {RangeError} `options.weekStartsOn` must be between 0 and 6\n * @throws {RangeError} `options.firstWeekContainsDate` must be between 1 and 7\n * @throws {RangeError} use `yyyy` instead of `YYYY` for formatting years using [format provided] to the input [input provided]; see: https://git.io/fxCyr\n * @throws {RangeError} use `yy` instead of `YY` for formatting years using [format provided] to the input [input provided]; see: https://git.io/fxCyr\n * @throws {RangeError} use `d` instead of `D` for formatting days of the month using [format provided] to the input [input provided]; see: https://git.io/fxCyr\n * @throws {RangeError} use `dd` instead of `DD` for formatting days of the month using [format provided] to the input [input provided]; see: https://git.io/fxCyr\n * @throws {RangeError} format string contains an unescaped latin alphabet character\n *\n * @example\n * // Represent 11 February 2014 in middle-endian format:\n * var result = format(new Date(2014, 1, 11), 'MM/dd/yyyy')\n * //=> '02/11/2014'\n *\n * @example\n * // Represent 2 July 2014 in Esperanto:\n * import { eoLocale } from 'date-fns/locale/eo'\n * var result = format(new Date(2014, 6, 2), \"do 'de' MMMM yyyy\", {\n *   locale: eoLocale\n * })\n * //=> '2-a de julio 2014'\n *\n * @example\n * // Escape string by single quote characters:\n * var result = format(new Date(2014, 6, 2, 15), \"h 'o''clock'\")\n * //=> \"3 o'clock\"\n */\n\nexport default function format(dirtyDate, dirtyFormatStr, dirtyOptions) {\n  requiredArgs(2, arguments);\n  var formatStr = String(dirtyFormatStr);\n  var options = dirtyOptions || {};\n  var locale = options.locale || defaultLocale;\n  var localeFirstWeekContainsDate = locale.options && locale.options.firstWeekContainsDate;\n  var defaultFirstWeekContainsDate = localeFirstWeekContainsDate == null ? 1 : toInteger(localeFirstWeekContainsDate);\n  var firstWeekContainsDate = options.firstWeekContainsDate == null ? defaultFirstWeekContainsDate : toInteger(options.firstWeekContainsDate); // Test if weekStartsOn is between 1 and 7 _and_ is not NaN\n\n  if (!(firstWeekContainsDate >= 1 && firstWeekContainsDate <= 7)) {\n    throw new RangeError('firstWeekContainsDate must be between 1 and 7 inclusively');\n  }\n\n  var localeWeekStartsOn = locale.options && locale.options.weekStartsOn;\n  var defaultWeekStartsOn = localeWeekStartsOn == null ? 0 : toInteger(localeWeekStartsOn);\n  var weekStartsOn = options.weekStartsOn == null ? defaultWeekStartsOn : toInteger(options.weekStartsOn); // Test if weekStartsOn is between 0 and 6 _and_ is not NaN\n\n  if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {\n    throw new RangeError('weekStartsOn must be between 0 and 6 inclusively');\n  }\n\n  if (!locale.localize) {\n    throw new RangeError('locale must contain localize property');\n  }\n\n  if (!locale.formatLong) {\n    throw new RangeError('locale must contain formatLong property');\n  }\n\n  var originalDate = toDate(dirtyDate);\n\n  if (!isValid(originalDate)) {\n    throw new RangeError('Invalid time value');\n  } // Convert the date in system timezone to the same date in UTC+00:00 timezone.\n  // This ensures that when UTC functions will be implemented, locales will be compatible with them.\n  // See an issue about UTC functions: https://github.com/date-fns/date-fns/issues/376\n\n\n  var timezoneOffset = getTimezoneOffsetInMilliseconds(originalDate);\n  var utcDate = subMilliseconds(originalDate, timezoneOffset);\n  var formatterOptions = {\n    firstWeekContainsDate: firstWeekContainsDate,\n    weekStartsOn: weekStartsOn,\n    locale: locale,\n    _originalDate: originalDate\n  };\n  var result = formatStr.match(longFormattingTokensRegExp).map(function (substring) {\n    var firstCharacter = substring[0];\n\n    if (firstCharacter === 'p' || firstCharacter === 'P') {\n      var longFormatter = longFormatters[firstCharacter];\n      return longFormatter(substring, locale.formatLong, formatterOptions);\n    }\n\n    return substring;\n  }).join('').match(formattingTokensRegExp).map(function (substring) {\n    // Replace two single quote characters with one single quote character\n    if (substring === \"''\") {\n      return \"'\";\n    }\n\n    var firstCharacter = substring[0];\n\n    if (firstCharacter === \"'\") {\n      return cleanEscapedString(substring);\n    }\n\n    var formatter = formatters[firstCharacter];\n\n    if (formatter) {\n      if (!options.useAdditionalWeekYearTokens && isProtectedWeekYearToken(substring)) {\n        throwProtectedError(substring, dirtyFormatStr, dirtyDate);\n      }\n\n      if (!options.useAdditionalDayOfYearTokens && isProtectedDayOfYearToken(substring)) {\n        throwProtectedError(substring, dirtyFormatStr, dirtyDate);\n      }\n\n      return formatter(utcDate, substring, locale.localize, formatterOptions);\n    }\n\n    if (firstCharacter.match(unescapedLatinCharacterRegExp)) {\n      throw new RangeError('Format string contains an unescaped latin alphabet character `' + firstCharacter + '`');\n    }\n\n    return substring;\n  }).join('');\n  return result;\n}\n\nfunction cleanEscapedString(input) {\n  return input.match(escapedStringRegExp)[1].replace(doubleQuoteRegExp, \"'\");\n}","export default function assign(target, dirtyObject) {\n  if (target == null) {\n    throw new TypeError('assign requires that input parameter not be null or undefined');\n  }\n\n  dirtyObject = dirtyObject || {};\n\n  for (var property in dirtyObject) {\n    if (Object.prototype.hasOwnProperty.call(dirtyObject, property)) {\n      target[property] = dirtyObject[property];\n    }\n  }\n\n  return target;\n}","import toDate from \"../../toDate/index.js\";\nimport requiredArgs from \"../requiredArgs/index.js\";\nimport toInteger from \"../toInteger/index.js\"; // This function will be a part of public API when UTC function will be implemented.\n// See issue: https://github.com/date-fns/date-fns/issues/376\n\nexport default function setUTCDay(dirtyDate, dirtyDay, dirtyOptions) {\n  requiredArgs(2, arguments);\n  var options = dirtyOptions || {};\n  var locale = options.locale;\n  var localeWeekStartsOn = locale && locale.options && locale.options.weekStartsOn;\n  var defaultWeekStartsOn = localeWeekStartsOn == null ? 0 : toInteger(localeWeekStartsOn);\n  var weekStartsOn = options.weekStartsOn == null ? defaultWeekStartsOn : toInteger(options.weekStartsOn); // Test if weekStartsOn is between 0 and 6 _and_ is not NaN\n\n  if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {\n    throw new RangeError('weekStartsOn must be between 0 and 6 inclusively');\n  }\n\n  var date = toDate(dirtyDate);\n  var day = toInteger(dirtyDay);\n  var currentDay = date.getUTCDay();\n  var remainder = day % 7;\n  var dayIndex = (remainder + 7) % 7;\n  var diff = (dayIndex < weekStartsOn ? 7 : 0) + day - currentDay;\n  date.setUTCDate(date.getUTCDate() + diff);\n  return date;\n}","import getUTCWeekYear from \"../../../_lib/getUTCWeekYear/index.js\";\nimport setUTCDay from \"../../../_lib/setUTCDay/index.js\";\nimport setUTCISODay from \"../../../_lib/setUTCISODay/index.js\";\nimport setUTCISOWeek from \"../../../_lib/setUTCISOWeek/index.js\";\nimport setUTCWeek from \"../../../_lib/setUTCWeek/index.js\";\nimport startOfUTCISOWeek from \"../../../_lib/startOfUTCISOWeek/index.js\";\nimport startOfUTCWeek from \"../../../_lib/startOfUTCWeek/index.js\";\nvar MILLISECONDS_IN_HOUR = 3600000;\nvar MILLISECONDS_IN_MINUTE = 60000;\nvar MILLISECONDS_IN_SECOND = 1000;\nvar numericPatterns = {\n  month: /^(1[0-2]|0?\\d)/,\n  // 0 to 12\n  date: /^(3[0-1]|[0-2]?\\d)/,\n  // 0 to 31\n  dayOfYear: /^(36[0-6]|3[0-5]\\d|[0-2]?\\d?\\d)/,\n  // 0 to 366\n  week: /^(5[0-3]|[0-4]?\\d)/,\n  // 0 to 53\n  hour23h: /^(2[0-3]|[0-1]?\\d)/,\n  // 0 to 23\n  hour24h: /^(2[0-4]|[0-1]?\\d)/,\n  // 0 to 24\n  hour11h: /^(1[0-1]|0?\\d)/,\n  // 0 to 11\n  hour12h: /^(1[0-2]|0?\\d)/,\n  // 0 to 12\n  minute: /^[0-5]?\\d/,\n  // 0 to 59\n  second: /^[0-5]?\\d/,\n  // 0 to 59\n  singleDigit: /^\\d/,\n  // 0 to 9\n  twoDigits: /^\\d{1,2}/,\n  // 0 to 99\n  threeDigits: /^\\d{1,3}/,\n  // 0 to 999\n  fourDigits: /^\\d{1,4}/,\n  // 0 to 9999\n  anyDigitsSigned: /^-?\\d+/,\n  singleDigitSigned: /^-?\\d/,\n  // 0 to 9, -0 to -9\n  twoDigitsSigned: /^-?\\d{1,2}/,\n  // 0 to 99, -0 to -99\n  threeDigitsSigned: /^-?\\d{1,3}/,\n  // 0 to 999, -0 to -999\n  fourDigitsSigned: /^-?\\d{1,4}/ // 0 to 9999, -0 to -9999\n\n};\nvar timezonePatterns = {\n  basicOptionalMinutes: /^([+-])(\\d{2})(\\d{2})?|Z/,\n  basic: /^([+-])(\\d{2})(\\d{2})|Z/,\n  basicOptionalSeconds: /^([+-])(\\d{2})(\\d{2})((\\d{2}))?|Z/,\n  extended: /^([+-])(\\d{2}):(\\d{2})|Z/,\n  extendedOptionalSeconds: /^([+-])(\\d{2}):(\\d{2})(:(\\d{2}))?|Z/\n};\n\nfunction parseNumericPattern(pattern, string, valueCallback) {\n  var matchResult = string.match(pattern);\n\n  if (!matchResult) {\n    return null;\n  }\n\n  var value = parseInt(matchResult[0], 10);\n  return {\n    value: valueCallback ? valueCallback(value) : value,\n    rest: string.slice(matchResult[0].length)\n  };\n}\n\nfunction parseTimezonePattern(pattern, string) {\n  var matchResult = string.match(pattern);\n\n  if (!matchResult) {\n    return null;\n  } // Input is 'Z'\n\n\n  if (matchResult[0] === 'Z') {\n    return {\n      value: 0,\n      rest: string.slice(1)\n    };\n  }\n\n  var sign = matchResult[1] === '+' ? 1 : -1;\n  var hours = matchResult[2] ? parseInt(matchResult[2], 10) : 0;\n  var minutes = matchResult[3] ? parseInt(matchResult[3], 10) : 0;\n  var seconds = matchResult[5] ? parseInt(matchResult[5], 10) : 0;\n  return {\n    value: sign * (hours * MILLISECONDS_IN_HOUR + minutes * MILLISECONDS_IN_MINUTE + seconds * MILLISECONDS_IN_SECOND),\n    rest: string.slice(matchResult[0].length)\n  };\n}\n\nfunction parseAnyDigitsSigned(string, valueCallback) {\n  return parseNumericPattern(numericPatterns.anyDigitsSigned, string, valueCallback);\n}\n\nfunction parseNDigits(n, string, valueCallback) {\n  switch (n) {\n    case 1:\n      return parseNumericPattern(numericPatterns.singleDigit, string, valueCallback);\n\n    case 2:\n      return parseNumericPattern(numericPatterns.twoDigits, string, valueCallback);\n\n    case 3:\n      return parseNumericPattern(numericPatterns.threeDigits, string, valueCallback);\n\n    case 4:\n      return parseNumericPattern(numericPatterns.fourDigits, string, valueCallback);\n\n    default:\n      return parseNumericPattern(new RegExp('^\\\\d{1,' + n + '}'), string, valueCallback);\n  }\n}\n\nfunction parseNDigitsSigned(n, string, valueCallback) {\n  switch (n) {\n    case 1:\n      return parseNumericPattern(numericPatterns.singleDigitSigned, string, valueCallback);\n\n    case 2:\n      return parseNumericPattern(numericPatterns.twoDigitsSigned, string, valueCallback);\n\n    case 3:\n      return parseNumericPattern(numericPatterns.threeDigitsSigned, string, valueCallback);\n\n    case 4:\n      return parseNumericPattern(numericPatterns.fourDigitsSigned, string, valueCallback);\n\n    default:\n      return parseNumericPattern(new RegExp('^-?\\\\d{1,' + n + '}'), string, valueCallback);\n  }\n}\n\nfunction dayPeriodEnumToHours(enumValue) {\n  switch (enumValue) {\n    case 'morning':\n      return 4;\n\n    case 'evening':\n      return 17;\n\n    case 'pm':\n    case 'noon':\n    case 'afternoon':\n      return 12;\n\n    case 'am':\n    case 'midnight':\n    case 'night':\n    default:\n      return 0;\n  }\n}\n\nfunction normalizeTwoDigitYear(twoDigitYear, currentYear) {\n  var isCommonEra = currentYear > 0; // Absolute number of the current year:\n  // 1 -> 1 AC\n  // 0 -> 1 BC\n  // -1 -> 2 BC\n\n  var absCurrentYear = isCommonEra ? currentYear : 1 - currentYear;\n  var result;\n\n  if (absCurrentYear <= 50) {\n    result = twoDigitYear || 100;\n  } else {\n    var rangeEnd = absCurrentYear + 50;\n    var rangeEndCentury = Math.floor(rangeEnd / 100) * 100;\n    var isPreviousCentury = twoDigitYear >= rangeEnd % 100;\n    result = twoDigitYear + rangeEndCentury - (isPreviousCentury ? 100 : 0);\n  }\n\n  return isCommonEra ? result : 1 - result;\n}\n\nvar DAYS_IN_MONTH = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\nvar DAYS_IN_MONTH_LEAP_YEAR = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]; // User for validation\n\nfunction isLeapYearIndex(year) {\n  return year % 400 === 0 || year % 4 === 0 && year % 100 !== 0;\n}\n/*\n * |     | Unit                           |     | Unit                           |\n * |-----|--------------------------------|-----|--------------------------------|\n * |  a  | AM, PM                         |  A* | Milliseconds in day            |\n * |  b  | AM, PM, noon, midnight         |  B  | Flexible day period            |\n * |  c  | Stand-alone local day of week  |  C* | Localized hour w/ day period   |\n * |  d  | Day of month                   |  D  | Day of year                    |\n * |  e  | Local day of week              |  E  | Day of week                    |\n * |  f  |                                |  F* | Day of week in month           |\n * |  g* | Modified Julian day            |  G  | Era                            |\n * |  h  | Hour [1-12]                    |  H  | Hour [0-23]                    |\n * |  i! | ISO day of week                |  I! | ISO week of year               |\n * |  j* | Localized hour w/ day period   |  J* | Localized hour w/o day period  |\n * |  k  | Hour [1-24]                    |  K  | Hour [0-11]                    |\n * |  l* | (deprecated)                   |  L  | Stand-alone month              |\n * |  m  | Minute                         |  M  | Month                          |\n * |  n  |                                |  N  |                                |\n * |  o! | Ordinal number modifier        |  O* | Timezone (GMT)                 |\n * |  p  |                                |  P  |                                |\n * |  q  | Stand-alone quarter            |  Q  | Quarter                        |\n * |  r* | Related Gregorian year         |  R! | ISO week-numbering year        |\n * |  s  | Second                         |  S  | Fraction of second             |\n * |  t! | Seconds timestamp              |  T! | Milliseconds timestamp         |\n * |  u  | Extended year                  |  U* | Cyclic year                    |\n * |  v* | Timezone (generic non-locat.)  |  V* | Timezone (location)            |\n * |  w  | Local week of year             |  W* | Week of month                  |\n * |  x  | Timezone (ISO-8601 w/o Z)      |  X  | Timezone (ISO-8601)            |\n * |  y  | Year (abs)                     |  Y  | Local week-numbering year      |\n * |  z* | Timezone (specific non-locat.) |  Z* | Timezone (aliases)             |\n *\n * Letters marked by * are not implemented but reserved by Unicode standard.\n *\n * Letters marked by ! are non-standard, but implemented by date-fns:\n * - `o` modifies the previous token to turn it into an ordinal (see `parse` docs)\n * - `i` is ISO day of week. For `i` and `ii` is returns numeric ISO week days,\n *   i.e. 7 for Sunday, 1 for Monday, etc.\n * - `I` is ISO week of year, as opposed to `w` which is local week of year.\n * - `R` is ISO week-numbering year, as opposed to `Y` which is local week-numbering year.\n *   `R` is supposed to be used in conjunction with `I` and `i`\n *   for universal ISO week-numbering date, whereas\n *   `Y` is supposed to be used in conjunction with `w` and `e`\n *   for week-numbering date specific to the locale.\n */\n\n\nvar parsers = {\n  // Era\n  G: {\n    priority: 140,\n    parse: function (string, token, match, _options) {\n      switch (token) {\n        // AD, BC\n        case 'G':\n        case 'GG':\n        case 'GGG':\n          return match.era(string, {\n            width: 'abbreviated'\n          }) || match.era(string, {\n            width: 'narrow'\n          });\n        // A, B\n\n        case 'GGGGG':\n          return match.era(string, {\n            width: 'narrow'\n          });\n        // Anno Domini, Before Christ\n\n        case 'GGGG':\n        default:\n          return match.era(string, {\n            width: 'wide'\n          }) || match.era(string, {\n            width: 'abbreviated'\n          }) || match.era(string, {\n            width: 'narrow'\n          });\n      }\n    },\n    set: function (date, flags, value, _options) {\n      flags.era = value;\n      date.setUTCFullYear(value, 0, 1);\n      date.setUTCHours(0, 0, 0, 0);\n      return date;\n    },\n    incompatibleTokens: ['R', 'u', 't', 'T']\n  },\n  // Year\n  y: {\n    // From http://www.unicode.org/reports/tr35/tr35-31/tr35-dates.html#Date_Format_Patterns\n    // | Year     |     y | yy |   yyy |  yyyy | yyyyy |\n    // |----------|-------|----|-------|-------|-------|\n    // | AD 1     |     1 | 01 |   001 |  0001 | 00001 |\n    // | AD 12    |    12 | 12 |   012 |  0012 | 00012 |\n    // | AD 123   |   123 | 23 |   123 |  0123 | 00123 |\n    // | AD 1234  |  1234 | 34 |  1234 |  1234 | 01234 |\n    // | AD 12345 | 12345 | 45 | 12345 | 12345 | 12345 |\n    priority: 130,\n    parse: function (string, token, match, _options) {\n      var valueCallback = function (year) {\n        return {\n          year: year,\n          isTwoDigitYear: token === 'yy'\n        };\n      };\n\n      switch (token) {\n        case 'y':\n          return parseNDigits(4, string, valueCallback);\n\n        case 'yo':\n          return match.ordinalNumber(string, {\n            unit: 'year',\n            valueCallback: valueCallback\n          });\n\n        default:\n          return parseNDigits(token.length, string, valueCallback);\n      }\n    },\n    validate: function (_date, value, _options) {\n      return value.isTwoDigitYear || value.year > 0;\n    },\n    set: function (date, flags, value, _options) {\n      var currentYear = date.getUTCFullYear();\n\n      if (value.isTwoDigitYear) {\n        var normalizedTwoDigitYear = normalizeTwoDigitYear(value.year, currentYear);\n        date.setUTCFullYear(normalizedTwoDigitYear, 0, 1);\n        date.setUTCHours(0, 0, 0, 0);\n        return date;\n      }\n\n      var year = !('era' in flags) || flags.era === 1 ? value.year : 1 - value.year;\n      date.setUTCFullYear(year, 0, 1);\n      date.setUTCHours(0, 0, 0, 0);\n      return date;\n    },\n    incompatibleTokens: ['Y', 'R', 'u', 'w', 'I', 'i', 'e', 'c', 't', 'T']\n  },\n  // Local week-numbering year\n  Y: {\n    priority: 130,\n    parse: function (string, token, match, _options) {\n      var valueCallback = function (year) {\n        return {\n          year: year,\n          isTwoDigitYear: token === 'YY'\n        };\n      };\n\n      switch (token) {\n        case 'Y':\n          return parseNDigits(4, string, valueCallback);\n\n        case 'Yo':\n          return match.ordinalNumber(string, {\n            unit: 'year',\n            valueCallback: valueCallback\n          });\n\n        default:\n          return parseNDigits(token.length, string, valueCallback);\n      }\n    },\n    validate: function (_date, value, _options) {\n      return value.isTwoDigitYear || value.year > 0;\n    },\n    set: function (date, flags, value, options) {\n      var currentYear = getUTCWeekYear(date, options);\n\n      if (value.isTwoDigitYear) {\n        var normalizedTwoDigitYear = normalizeTwoDigitYear(value.year, currentYear);\n        date.setUTCFullYear(normalizedTwoDigitYear, 0, options.firstWeekContainsDate);\n        date.setUTCHours(0, 0, 0, 0);\n        return startOfUTCWeek(date, options);\n      }\n\n      var year = !('era' in flags) || flags.era === 1 ? value.year : 1 - value.year;\n      date.setUTCFullYear(year, 0, options.firstWeekContainsDate);\n      date.setUTCHours(0, 0, 0, 0);\n      return startOfUTCWeek(date, options);\n    },\n    incompatibleTokens: ['y', 'R', 'u', 'Q', 'q', 'M', 'L', 'I', 'd', 'D', 'i', 't', 'T']\n  },\n  // ISO week-numbering year\n  R: {\n    priority: 130,\n    parse: function (string, token, _match, _options) {\n      if (token === 'R') {\n        return parseNDigitsSigned(4, string);\n      }\n\n      return parseNDigitsSigned(token.length, string);\n    },\n    set: function (_date, _flags, value, _options) {\n      var firstWeekOfYear = new Date(0);\n      firstWeekOfYear.setUTCFullYear(value, 0, 4);\n      firstWeekOfYear.setUTCHours(0, 0, 0, 0);\n      return startOfUTCISOWeek(firstWeekOfYear);\n    },\n    incompatibleTokens: ['G', 'y', 'Y', 'u', 'Q', 'q', 'M', 'L', 'w', 'd', 'D', 'e', 'c', 't', 'T']\n  },\n  // Extended year\n  u: {\n    priority: 130,\n    parse: function (string, token, _match, _options) {\n      if (token === 'u') {\n        return parseNDigitsSigned(4, string);\n      }\n\n      return parseNDigitsSigned(token.length, string);\n    },\n    set: function (date, _flags, value, _options) {\n      date.setUTCFullYear(value, 0, 1);\n      date.setUTCHours(0, 0, 0, 0);\n      return date;\n    },\n    incompatibleTokens: ['G', 'y', 'Y', 'R', 'w', 'I', 'i', 'e', 'c', 't', 'T']\n  },\n  // Quarter\n  Q: {\n    priority: 120,\n    parse: function (string, token, match, _options) {\n      switch (token) {\n        // 1, 2, 3, 4\n        case 'Q':\n        case 'QQ':\n          // 01, 02, 03, 04\n          return parseNDigits(token.length, string);\n        // 1st, 2nd, 3rd, 4th\n\n        case 'Qo':\n          return match.ordinalNumber(string, {\n            unit: 'quarter'\n          });\n        // Q1, Q2, Q3, Q4\n\n        case 'QQQ':\n          return match.quarter(string, {\n            width: 'abbreviated',\n            context: 'formatting'\n          }) || match.quarter(string, {\n            width: 'narrow',\n            context: 'formatting'\n          });\n        // 1, 2, 3, 4 (narrow quarter; could be not numerical)\n\n        case 'QQQQQ':\n          return match.quarter(string, {\n            width: 'narrow',\n            context: 'formatting'\n          });\n        // 1st quarter, 2nd quarter, ...\n\n        case 'QQQQ':\n        default:\n          return match.quarter(string, {\n            width: 'wide',\n            context: 'formatting'\n          }) || match.quarter(string, {\n            width: 'abbreviated',\n            context: 'formatting'\n          }) || match.quarter(string, {\n            width: 'narrow',\n            context: 'formatting'\n          });\n      }\n    },\n    validate: function (_date, value, _options) {\n      return value >= 1 && value <= 4;\n    },\n    set: function (date, _flags, value, _options) {\n      date.setUTCMonth((value - 1) * 3, 1);\n      date.setUTCHours(0, 0, 0, 0);\n      return date;\n    },\n    incompatibleTokens: ['Y', 'R', 'q', 'M', 'L', 'w', 'I', 'd', 'D', 'i', 'e', 'c', 't', 'T']\n  },\n  // Stand-alone quarter\n  q: {\n    priority: 120,\n    parse: function (string, token, match, _options) {\n      switch (token) {\n        // 1, 2, 3, 4\n        case 'q':\n        case 'qq':\n          // 01, 02, 03, 04\n          return parseNDigits(token.length, string);\n        // 1st, 2nd, 3rd, 4th\n\n        case 'qo':\n          return match.ordinalNumber(string, {\n            unit: 'quarter'\n          });\n        // Q1, Q2, Q3, Q4\n\n        case 'qqq':\n          return match.quarter(string, {\n            width: 'abbreviated',\n            context: 'standalone'\n          }) || match.quarter(string, {\n            width: 'narrow',\n            context: 'standalone'\n          });\n        // 1, 2, 3, 4 (narrow quarter; could be not numerical)\n\n        case 'qqqqq':\n          return match.quarter(string, {\n            width: 'narrow',\n            context: 'standalone'\n          });\n        // 1st quarter, 2nd quarter, ...\n\n        case 'qqqq':\n        default:\n          return match.quarter(string, {\n            width: 'wide',\n            context: 'standalone'\n          }) || match.quarter(string, {\n            width: 'abbreviated',\n            context: 'standalone'\n          }) || match.quarter(string, {\n            width: 'narrow',\n            context: 'standalone'\n          });\n      }\n    },\n    validate: function (_date, value, _options) {\n      return value >= 1 && value <= 4;\n    },\n    set: function (date, _flags, value, _options) {\n      date.setUTCMonth((value - 1) * 3, 1);\n      date.setUTCHours(0, 0, 0, 0);\n      return date;\n    },\n    incompatibleTokens: ['Y', 'R', 'Q', 'M', 'L', 'w', 'I', 'd', 'D', 'i', 'e', 'c', 't', 'T']\n  },\n  // Month\n  M: {\n    priority: 110,\n    parse: function (string, token, match, _options) {\n      var valueCallback = function (value) {\n        return value - 1;\n      };\n\n      switch (token) {\n        // 1, 2, ..., 12\n        case 'M':\n          return parseNumericPattern(numericPatterns.month, string, valueCallback);\n        // 01, 02, ..., 12\n\n        case 'MM':\n          return parseNDigits(2, string, valueCallback);\n        // 1st, 2nd, ..., 12th\n\n        case 'Mo':\n          return match.ordinalNumber(string, {\n            unit: 'month',\n            valueCallback: valueCallback\n          });\n        // Jan, Feb, ..., Dec\n\n        case 'MMM':\n          return match.month(string, {\n            width: 'abbreviated',\n            context: 'formatting'\n          }) || match.month(string, {\n            width: 'narrow',\n            context: 'formatting'\n          });\n        // J, F, ..., D\n\n        case 'MMMMM':\n          return match.month(string, {\n            width: 'narrow',\n            context: 'formatting'\n          });\n        // January, February, ..., December\n\n        case 'MMMM':\n        default:\n          return match.month(string, {\n            width: 'wide',\n            context: 'formatting'\n          }) || match.month(string, {\n            width: 'abbreviated',\n            context: 'formatting'\n          }) || match.month(string, {\n            width: 'narrow',\n            context: 'formatting'\n          });\n      }\n    },\n    validate: function (_date, value, _options) {\n      return value >= 0 && value <= 11;\n    },\n    set: function (date, _flags, value, _options) {\n      date.setUTCMonth(value, 1);\n      date.setUTCHours(0, 0, 0, 0);\n      return date;\n    },\n    incompatibleTokens: ['Y', 'R', 'q', 'Q', 'L', 'w', 'I', 'D', 'i', 'e', 'c', 't', 'T']\n  },\n  // Stand-alone month\n  L: {\n    priority: 110,\n    parse: function (string, token, match, _options) {\n      var valueCallback = function (value) {\n        return value - 1;\n      };\n\n      switch (token) {\n        // 1, 2, ..., 12\n        case 'L':\n          return parseNumericPattern(numericPatterns.month, string, valueCallback);\n        // 01, 02, ..., 12\n\n        case 'LL':\n          return parseNDigits(2, string, valueCallback);\n        // 1st, 2nd, ..., 12th\n\n        case 'Lo':\n          return match.ordinalNumber(string, {\n            unit: 'month',\n            valueCallback: valueCallback\n          });\n        // Jan, Feb, ..., Dec\n\n        case 'LLL':\n          return match.month(string, {\n            width: 'abbreviated',\n            context: 'standalone'\n          }) || match.month(string, {\n            width: 'narrow',\n            context: 'standalone'\n          });\n        // J, F, ..., D\n\n        case 'LLLLL':\n          return match.month(string, {\n            width: 'narrow',\n            context: 'standalone'\n          });\n        // January, February, ..., December\n\n        case 'LLLL':\n        default:\n          return match.month(string, {\n            width: 'wide',\n            context: 'standalone'\n          }) || match.month(string, {\n            width: 'abbreviated',\n            context: 'standalone'\n          }) || match.month(string, {\n            width: 'narrow',\n            context: 'standalone'\n          });\n      }\n    },\n    validate: function (_date, value, _options) {\n      return value >= 0 && value <= 11;\n    },\n    set: function (date, _flags, value, _options) {\n      date.setUTCMonth(value, 1);\n      date.setUTCHours(0, 0, 0, 0);\n      return date;\n    },\n    incompatibleTokens: ['Y', 'R', 'q', 'Q', 'M', 'w', 'I', 'D', 'i', 'e', 'c', 't', 'T']\n  },\n  // Local week of year\n  w: {\n    priority: 100,\n    parse: function (string, token, match, _options) {\n      switch (token) {\n        case 'w':\n          return parseNumericPattern(numericPatterns.week, string);\n\n        case 'wo':\n          return match.ordinalNumber(string, {\n            unit: 'week'\n          });\n\n        default:\n          return parseNDigits(token.length, string);\n      }\n    },\n    validate: function (_date, value, _options) {\n      return value >= 1 && value <= 53;\n    },\n    set: function (date, _flags, value, options) {\n      return startOfUTCWeek(setUTCWeek(date, value, options), options);\n    },\n    incompatibleTokens: ['y', 'R', 'u', 'q', 'Q', 'M', 'L', 'I', 'd', 'D', 'i', 't', 'T']\n  },\n  // ISO week of year\n  I: {\n    priority: 100,\n    parse: function (string, token, match, _options) {\n      switch (token) {\n        case 'I':\n          return parseNumericPattern(numericPatterns.week, string);\n\n        case 'Io':\n          return match.ordinalNumber(string, {\n            unit: 'week'\n          });\n\n        default:\n          return parseNDigits(token.length, string);\n      }\n    },\n    validate: function (_date, value, _options) {\n      return value >= 1 && value <= 53;\n    },\n    set: function (date, _flags, value, options) {\n      return startOfUTCISOWeek(setUTCISOWeek(date, value, options), options);\n    },\n    incompatibleTokens: ['y', 'Y', 'u', 'q', 'Q', 'M', 'L', 'w', 'd', 'D', 'e', 'c', 't', 'T']\n  },\n  // Day of the month\n  d: {\n    priority: 90,\n    subPriority: 1,\n    parse: function (string, token, match, _options) {\n      switch (token) {\n        case 'd':\n          return parseNumericPattern(numericPatterns.date, string);\n\n        case 'do':\n          return match.ordinalNumber(string, {\n            unit: 'date'\n          });\n\n        default:\n          return parseNDigits(token.length, string);\n      }\n    },\n    validate: function (date, value, _options) {\n      var year = date.getUTCFullYear();\n      var isLeapYear = isLeapYearIndex(year);\n      var month = date.getUTCMonth();\n\n      if (isLeapYear) {\n        return value >= 1 && value <= DAYS_IN_MONTH_LEAP_YEAR[month];\n      } else {\n        return value >= 1 && value <= DAYS_IN_MONTH[month];\n      }\n    },\n    set: function (date, _flags, value, _options) {\n      date.setUTCDate(value);\n      date.setUTCHours(0, 0, 0, 0);\n      return date;\n    },\n    incompatibleTokens: ['Y', 'R', 'q', 'Q', 'w', 'I', 'D', 'i', 'e', 'c', 't', 'T']\n  },\n  // Day of year\n  D: {\n    priority: 90,\n    subPriority: 1,\n    parse: function (string, token, match, _options) {\n      switch (token) {\n        case 'D':\n        case 'DD':\n          return parseNumericPattern(numericPatterns.dayOfYear, string);\n\n        case 'Do':\n          return match.ordinalNumber(string, {\n            unit: 'date'\n          });\n\n        default:\n          return parseNDigits(token.length, string);\n      }\n    },\n    validate: function (date, value, _options) {\n      var year = date.getUTCFullYear();\n      var isLeapYear = isLeapYearIndex(year);\n\n      if (isLeapYear) {\n        return value >= 1 && value <= 366;\n      } else {\n        return value >= 1 && value <= 365;\n      }\n    },\n    set: function (date, _flags, value, _options) {\n      date.setUTCMonth(0, value);\n      date.setUTCHours(0, 0, 0, 0);\n      return date;\n    },\n    incompatibleTokens: ['Y', 'R', 'q', 'Q', 'M', 'L', 'w', 'I', 'd', 'E', 'i', 'e', 'c', 't', 'T']\n  },\n  // Day of week\n  E: {\n    priority: 90,\n    parse: function (string, token, match, _options) {\n      switch (token) {\n        // Tue\n        case 'E':\n        case 'EE':\n        case 'EEE':\n          return match.day(string, {\n            width: 'abbreviated',\n            context: 'formatting'\n          }) || match.day(string, {\n            width: 'short',\n            context: 'formatting'\n          }) || match.day(string, {\n            width: 'narrow',\n            context: 'formatting'\n          });\n        // T\n\n        case 'EEEEE':\n          return match.day(string, {\n            width: 'narrow',\n            context: 'formatting'\n          });\n        // Tu\n\n        case 'EEEEEE':\n          return match.day(string, {\n            width: 'short',\n            context: 'formatting'\n          }) || match.day(string, {\n            width: 'narrow',\n            context: 'formatting'\n          });\n        // Tuesday\n\n        case 'EEEE':\n        default:\n          return match.day(string, {\n            width: 'wide',\n            context: 'formatting'\n          }) || match.day(string, {\n            width: 'abbreviated',\n            context: 'formatting'\n          }) || match.day(string, {\n            width: 'short',\n            context: 'formatting'\n          }) || match.day(string, {\n            width: 'narrow',\n            context: 'formatting'\n          });\n      }\n    },\n    validate: function (_date, value, _options) {\n      return value >= 0 && value <= 6;\n    },\n    set: function (date, _flags, value, options) {\n      date = setUTCDay(date, value, options);\n      date.setUTCHours(0, 0, 0, 0);\n      return date;\n    },\n    incompatibleTokens: ['D', 'i', 'e', 'c', 't', 'T']\n  },\n  // Local day of week\n  e: {\n    priority: 90,\n    parse: function (string, token, match, options) {\n      var valueCallback = function (value) {\n        var wholeWeekDays = Math.floor((value - 1) / 7) * 7;\n        return (value + options.weekStartsOn + 6) % 7 + wholeWeekDays;\n      };\n\n      switch (token) {\n        // 3\n        case 'e':\n        case 'ee':\n          // 03\n          return parseNDigits(token.length, string, valueCallback);\n        // 3rd\n\n        case 'eo':\n          return match.ordinalNumber(string, {\n            unit: 'day',\n            valueCallback: valueCallback\n          });\n        // Tue\n\n        case 'eee':\n          return match.day(string, {\n            width: 'abbreviated',\n            context: 'formatting'\n          }) || match.day(string, {\n            width: 'short',\n            context: 'formatting'\n          }) || match.day(string, {\n            width: 'narrow',\n            context: 'formatting'\n          });\n        // T\n\n        case 'eeeee':\n          return match.day(string, {\n            width: 'narrow',\n            context: 'formatting'\n          });\n        // Tu\n\n        case 'eeeeee':\n          return match.day(string, {\n            width: 'short',\n            context: 'formatting'\n          }) || match.day(string, {\n            width: 'narrow',\n            context: 'formatting'\n          });\n        // Tuesday\n\n        case 'eeee':\n        default:\n          return match.day(string, {\n            width: 'wide',\n            context: 'formatting'\n          }) || match.day(string, {\n            width: 'abbreviated',\n            context: 'formatting'\n          }) || match.day(string, {\n            width: 'short',\n            context: 'formatting'\n          }) || match.day(string, {\n            width: 'narrow',\n            context: 'formatting'\n          });\n      }\n    },\n    validate: function (_date, value, _options) {\n      return value >= 0 && value <= 6;\n    },\n    set: function (date, _flags, value, options) {\n      date = setUTCDay(date, value, options);\n      date.setUTCHours(0, 0, 0, 0);\n      return date;\n    },\n    incompatibleTokens: ['y', 'R', 'u', 'q', 'Q', 'M', 'L', 'I', 'd', 'D', 'E', 'i', 'c', 't', 'T']\n  },\n  // Stand-alone local day of week\n  c: {\n    priority: 90,\n    parse: function (string, token, match, options) {\n      var valueCallback = function (value) {\n        var wholeWeekDays = Math.floor((value - 1) / 7) * 7;\n        return (value + options.weekStartsOn + 6) % 7 + wholeWeekDays;\n      };\n\n      switch (token) {\n        // 3\n        case 'c':\n        case 'cc':\n          // 03\n          return parseNDigits(token.length, string, valueCallback);\n        // 3rd\n\n        case 'co':\n          return match.ordinalNumber(string, {\n            unit: 'day',\n            valueCallback: valueCallback\n          });\n        // Tue\n\n        case 'ccc':\n          return match.day(string, {\n            width: 'abbreviated',\n            context: 'standalone'\n          }) || match.day(string, {\n            width: 'short',\n            context: 'standalone'\n          }) || match.day(string, {\n            width: 'narrow',\n            context: 'standalone'\n          });\n        // T\n\n        case 'ccccc':\n          return match.day(string, {\n            width: 'narrow',\n            context: 'standalone'\n          });\n        // Tu\n\n        case 'cccccc':\n          return match.day(string, {\n            width: 'short',\n            context: 'standalone'\n          }) || match.day(string, {\n            width: 'narrow',\n            context: 'standalone'\n          });\n        // Tuesday\n\n        case 'cccc':\n        default:\n          return match.day(string, {\n            width: 'wide',\n            context: 'standalone'\n          }) || match.day(string, {\n            width: 'abbreviated',\n            context: 'standalone'\n          }) || match.day(string, {\n            width: 'short',\n            context: 'standalone'\n          }) || match.day(string, {\n            width: 'narrow',\n            context: 'standalone'\n          });\n      }\n    },\n    validate: function (_date, value, _options) {\n      return value >= 0 && value <= 6;\n    },\n    set: function (date, _flags, value, options) {\n      date = setUTCDay(date, value, options);\n      date.setUTCHours(0, 0, 0, 0);\n      return date;\n    },\n    incompatibleTokens: ['y', 'R', 'u', 'q', 'Q', 'M', 'L', 'I', 'd', 'D', 'E', 'i', 'e', 't', 'T']\n  },\n  // ISO day of week\n  i: {\n    priority: 90,\n    parse: function (string, token, match, _options) {\n      var valueCallback = function (value) {\n        if (value === 0) {\n          return 7;\n        }\n\n        return value;\n      };\n\n      switch (token) {\n        // 2\n        case 'i':\n        case 'ii':\n          // 02\n          return parseNDigits(token.length, string);\n        // 2nd\n\n        case 'io':\n          return match.ordinalNumber(string, {\n            unit: 'day'\n          });\n        // Tue\n\n        case 'iii':\n          return match.day(string, {\n            width: 'abbreviated',\n            context: 'formatting',\n            valueCallback: valueCallback\n          }) || match.day(string, {\n            width: 'short',\n            context: 'formatting',\n            valueCallback: valueCallback\n          }) || match.day(string, {\n            width: 'narrow',\n            context: 'formatting',\n            valueCallback: valueCallback\n          });\n        // T\n\n        case 'iiiii':\n          return match.day(string, {\n            width: 'narrow',\n            context: 'formatting',\n            valueCallback: valueCallback\n          });\n        // Tu\n\n        case 'iiiiii':\n          return match.day(string, {\n            width: 'short',\n            context: 'formatting',\n            valueCallback: valueCallback\n          }) || match.day(string, {\n            width: 'narrow',\n            context: 'formatting',\n            valueCallback: valueCallback\n          });\n        // Tuesday\n\n        case 'iiii':\n        default:\n          return match.day(string, {\n            width: 'wide',\n            context: 'formatting',\n            valueCallback: valueCallback\n          }) || match.day(string, {\n            width: 'abbreviated',\n            context: 'formatting',\n            valueCallback: valueCallback\n          }) || match.day(string, {\n            width: 'short',\n            context: 'formatting',\n            valueCallback: valueCallback\n          }) || match.day(string, {\n            width: 'narrow',\n            context: 'formatting',\n            valueCallback: valueCallback\n          });\n      }\n    },\n    validate: function (_date, value, _options) {\n      return value >= 1 && value <= 7;\n    },\n    set: function (date, _flags, value, options) {\n      date = setUTCISODay(date, value, options);\n      date.setUTCHours(0, 0, 0, 0);\n      return date;\n    },\n    incompatibleTokens: ['y', 'Y', 'u', 'q', 'Q', 'M', 'L', 'w', 'd', 'D', 'E', 'e', 'c', 't', 'T']\n  },\n  // AM or PM\n  a: {\n    priority: 80,\n    parse: function (string, token, match, _options) {\n      switch (token) {\n        case 'a':\n        case 'aa':\n        case 'aaa':\n          return match.dayPeriod(string, {\n            width: 'abbreviated',\n            context: 'formatting'\n          }) || match.dayPeriod(string, {\n            width: 'narrow',\n            context: 'formatting'\n          });\n\n        case 'aaaaa':\n          return match.dayPeriod(string, {\n            width: 'narrow',\n            context: 'formatting'\n          });\n\n        case 'aaaa':\n        default:\n          return match.dayPeriod(string, {\n            width: 'wide',\n            context: 'formatting'\n          }) || match.dayPeriod(string, {\n            width: 'abbreviated',\n            context: 'formatting'\n          }) || match.dayPeriod(string, {\n            width: 'narrow',\n            context: 'formatting'\n          });\n      }\n    },\n    set: function (date, _flags, value, _options) {\n      date.setUTCHours(dayPeriodEnumToHours(value), 0, 0, 0);\n      return date;\n    },\n    incompatibleTokens: ['b', 'B', 'H', 'k', 't', 'T']\n  },\n  // AM, PM, midnight\n  b: {\n    priority: 80,\n    parse: function (string, token, match, _options) {\n      switch (token) {\n        case 'b':\n        case 'bb':\n        case 'bbb':\n          return match.dayPeriod(string, {\n            width: 'abbreviated',\n            context: 'formatting'\n          }) || match.dayPeriod(string, {\n            width: 'narrow',\n            context: 'formatting'\n          });\n\n        case 'bbbbb':\n          return match.dayPeriod(string, {\n            width: 'narrow',\n            context: 'formatting'\n          });\n\n        case 'bbbb':\n        default:\n          return match.dayPeriod(string, {\n            width: 'wide',\n            context: 'formatting'\n          }) || match.dayPeriod(string, {\n            width: 'abbreviated',\n            context: 'formatting'\n          }) || match.dayPeriod(string, {\n            width: 'narrow',\n            context: 'formatting'\n          });\n      }\n    },\n    set: function (date, _flags, value, _options) {\n      date.setUTCHours(dayPeriodEnumToHours(value), 0, 0, 0);\n      return date;\n    },\n    incompatibleTokens: ['a', 'B', 'H', 'k', 't', 'T']\n  },\n  // in the morning, in the afternoon, in the evening, at night\n  B: {\n    priority: 80,\n    parse: function (string, token, match, _options) {\n      switch (token) {\n        case 'B':\n        case 'BB':\n        case 'BBB':\n          return match.dayPeriod(string, {\n            width: 'abbreviated',\n            context: 'formatting'\n          }) || match.dayPeriod(string, {\n            width: 'narrow',\n            context: 'formatting'\n          });\n\n        case 'BBBBB':\n          return match.dayPeriod(string, {\n            width: 'narrow',\n            context: 'formatting'\n          });\n\n        case 'BBBB':\n        default:\n          return match.dayPeriod(string, {\n            width: 'wide',\n            context: 'formatting'\n          }) || match.dayPeriod(string, {\n            width: 'abbreviated',\n            context: 'formatting'\n          }) || match.dayPeriod(string, {\n            width: 'narrow',\n            context: 'formatting'\n          });\n      }\n    },\n    set: function (date, _flags, value, _options) {\n      date.setUTCHours(dayPeriodEnumToHours(value), 0, 0, 0);\n      return date;\n    },\n    incompatibleTokens: ['a', 'b', 't', 'T']\n  },\n  // Hour [1-12]\n  h: {\n    priority: 70,\n    parse: function (string, token, match, _options) {\n      switch (token) {\n        case 'h':\n          return parseNumericPattern(numericPatterns.hour12h, string);\n\n        case 'ho':\n          return match.ordinalNumber(string, {\n            unit: 'hour'\n          });\n\n        default:\n          return parseNDigits(token.length, string);\n      }\n    },\n    validate: function (_date, value, _options) {\n      return value >= 1 && value <= 12;\n    },\n    set: function (date, _flags, value, _options) {\n      var isPM = date.getUTCHours() >= 12;\n\n      if (isPM && value < 12) {\n        date.setUTCHours(value + 12, 0, 0, 0);\n      } else if (!isPM && value === 12) {\n        date.setUTCHours(0, 0, 0, 0);\n      } else {\n        date.setUTCHours(value, 0, 0, 0);\n      }\n\n      return date;\n    },\n    incompatibleTokens: ['H', 'K', 'k', 't', 'T']\n  },\n  // Hour [0-23]\n  H: {\n    priority: 70,\n    parse: function (string, token, match, _options) {\n      switch (token) {\n        case 'H':\n          return parseNumericPattern(numericPatterns.hour23h, string);\n\n        case 'Ho':\n          return match.ordinalNumber(string, {\n            unit: 'hour'\n          });\n\n        default:\n          return parseNDigits(token.length, string);\n      }\n    },\n    validate: function (_date, value, _options) {\n      return value >= 0 && value <= 23;\n    },\n    set: function (date, _flags, value, _options) {\n      date.setUTCHours(value, 0, 0, 0);\n      return date;\n    },\n    incompatibleTokens: ['a', 'b', 'h', 'K', 'k', 't', 'T']\n  },\n  // Hour [0-11]\n  K: {\n    priority: 70,\n    parse: function (string, token, match, _options) {\n      switch (token) {\n        case 'K':\n          return parseNumericPattern(numericPatterns.hour11h, string);\n\n        case 'Ko':\n          return match.ordinalNumber(string, {\n            unit: 'hour'\n          });\n\n        default:\n          return parseNDigits(token.length, string);\n      }\n    },\n    validate: function (_date, value, _options) {\n      return value >= 0 && value <= 11;\n    },\n    set: function (date, _flags, value, _options) {\n      var isPM = date.getUTCHours() >= 12;\n\n      if (isPM && value < 12) {\n        date.setUTCHours(value + 12, 0, 0, 0);\n      } else {\n        date.setUTCHours(value, 0, 0, 0);\n      }\n\n      return date;\n    },\n    incompatibleTokens: ['h', 'H', 'k', 't', 'T']\n  },\n  // Hour [1-24]\n  k: {\n    priority: 70,\n    parse: function (string, token, match, _options) {\n      switch (token) {\n        case 'k':\n          return parseNumericPattern(numericPatterns.hour24h, string);\n\n        case 'ko':\n          return match.ordinalNumber(string, {\n            unit: 'hour'\n          });\n\n        default:\n          return parseNDigits(token.length, string);\n      }\n    },\n    validate: function (_date, value, _options) {\n      return value >= 1 && value <= 24;\n    },\n    set: function (date, _flags, value, _options) {\n      var hours = value <= 24 ? value % 24 : value;\n      date.setUTCHours(hours, 0, 0, 0);\n      return date;\n    },\n    incompatibleTokens: ['a', 'b', 'h', 'H', 'K', 't', 'T']\n  },\n  // Minute\n  m: {\n    priority: 60,\n    parse: function (string, token, match, _options) {\n      switch (token) {\n        case 'm':\n          return parseNumericPattern(numericPatterns.minute, string);\n\n        case 'mo':\n          return match.ordinalNumber(string, {\n            unit: 'minute'\n          });\n\n        default:\n          return parseNDigits(token.length, string);\n      }\n    },\n    validate: function (_date, value, _options) {\n      return value >= 0 && value <= 59;\n    },\n    set: function (date, _flags, value, _options) {\n      date.setUTCMinutes(value, 0, 0);\n      return date;\n    },\n    incompatibleTokens: ['t', 'T']\n  },\n  // Second\n  s: {\n    priority: 50,\n    parse: function (string, token, match, _options) {\n      switch (token) {\n        case 's':\n          return parseNumericPattern(numericPatterns.second, string);\n\n        case 'so':\n          return match.ordinalNumber(string, {\n            unit: 'second'\n          });\n\n        default:\n          return parseNDigits(token.length, string);\n      }\n    },\n    validate: function (_date, value, _options) {\n      return value >= 0 && value <= 59;\n    },\n    set: function (date, _flags, value, _options) {\n      date.setUTCSeconds(value, 0);\n      return date;\n    },\n    incompatibleTokens: ['t', 'T']\n  },\n  // Fraction of second\n  S: {\n    priority: 30,\n    parse: function (string, token, _match, _options) {\n      var valueCallback = function (value) {\n        return Math.floor(value * Math.pow(10, -token.length + 3));\n      };\n\n      return parseNDigits(token.length, string, valueCallback);\n    },\n    set: function (date, _flags, value, _options) {\n      date.setUTCMilliseconds(value);\n      return date;\n    },\n    incompatibleTokens: ['t', 'T']\n  },\n  // Timezone (ISO-8601. +00:00 is `'Z'`)\n  X: {\n    priority: 10,\n    parse: function (string, token, _match, _options) {\n      switch (token) {\n        case 'X':\n          return parseTimezonePattern(timezonePatterns.basicOptionalMinutes, string);\n\n        case 'XX':\n          return parseTimezonePattern(timezonePatterns.basic, string);\n\n        case 'XXXX':\n          return parseTimezonePattern(timezonePatterns.basicOptionalSeconds, string);\n\n        case 'XXXXX':\n          return parseTimezonePattern(timezonePatterns.extendedOptionalSeconds, string);\n\n        case 'XXX':\n        default:\n          return parseTimezonePattern(timezonePatterns.extended, string);\n      }\n    },\n    set: function (date, flags, value, _options) {\n      if (flags.timestampIsSet) {\n        return date;\n      }\n\n      return new Date(date.getTime() - value);\n    },\n    incompatibleTokens: ['t', 'T', 'x']\n  },\n  // Timezone (ISO-8601)\n  x: {\n    priority: 10,\n    parse: function (string, token, _match, _options) {\n      switch (token) {\n        case 'x':\n          return parseTimezonePattern(timezonePatterns.basicOptionalMinutes, string);\n\n        case 'xx':\n          return parseTimezonePattern(timezonePatterns.basic, string);\n\n        case 'xxxx':\n          return parseTimezonePattern(timezonePatterns.basicOptionalSeconds, string);\n\n        case 'xxxxx':\n          return parseTimezonePattern(timezonePatterns.extendedOptionalSeconds, string);\n\n        case 'xxx':\n        default:\n          return parseTimezonePattern(timezonePatterns.extended, string);\n      }\n    },\n    set: function (date, flags, value, _options) {\n      if (flags.timestampIsSet) {\n        return date;\n      }\n\n      return new Date(date.getTime() - value);\n    },\n    incompatibleTokens: ['t', 'T', 'X']\n  },\n  // Seconds timestamp\n  t: {\n    priority: 40,\n    parse: function (string, _token, _match, _options) {\n      return parseAnyDigitsSigned(string);\n    },\n    set: function (_date, _flags, value, _options) {\n      return [new Date(value * 1000), {\n        timestampIsSet: true\n      }];\n    },\n    incompatibleTokens: '*'\n  },\n  // Milliseconds timestamp\n  T: {\n    priority: 20,\n    parse: function (string, _token, _match, _options) {\n      return parseAnyDigitsSigned(string);\n    },\n    set: function (_date, _flags, value, _options) {\n      return [new Date(value), {\n        timestampIsSet: true\n      }];\n    },\n    incompatibleTokens: '*'\n  }\n};\nexport default parsers;","import toInteger from \"../toInteger/index.js\";\nimport toDate from \"../../toDate/index.js\";\nimport getUTCWeek from \"../getUTCWeek/index.js\";\nimport requiredArgs from \"../requiredArgs/index.js\"; // This function will be a part of public API when UTC function will be implemented.\n// See issue: https://github.com/date-fns/date-fns/issues/376\n\nexport default function setUTCWeek(dirtyDate, dirtyWeek, options) {\n  requiredArgs(2, arguments);\n  var date = toDate(dirtyDate);\n  var week = toInteger(dirtyWeek);\n  var diff = getUTCWeek(date, options) - week;\n  date.setUTCDate(date.getUTCDate() - diff * 7);\n  return date;\n}","import toInteger from \"../toInteger/index.js\";\nimport toDate from \"../../toDate/index.js\";\nimport getUTCISOWeek from \"../getUTCISOWeek/index.js\";\nimport requiredArgs from \"../requiredArgs/index.js\"; // This function will be a part of public API when UTC function will be implemented.\n// See issue: https://github.com/date-fns/date-fns/issues/376\n\nexport default function setUTCISOWeek(dirtyDate, dirtyISOWeek) {\n  requiredArgs(2, arguments);\n  var date = toDate(dirtyDate);\n  var isoWeek = toInteger(dirtyISOWeek);\n  var diff = getUTCISOWeek(date) - isoWeek;\n  date.setUTCDate(date.getUTCDate() - diff * 7);\n  return date;\n}","import toDate from \"../../toDate/index.js\";\nimport requiredArgs from \"../requiredArgs/index.js\";\nimport toInteger from \"../toInteger/index.js\"; // This function will be a part of public API when UTC function will be implemented.\n// See issue: https://github.com/date-fns/date-fns/issues/376\n\nexport default function setUTCISODay(dirtyDate, dirtyDay) {\n  requiredArgs(2, arguments);\n  var day = toInteger(dirtyDay);\n\n  if (day % 7 === 0) {\n    day = day - 7;\n  }\n\n  var weekStartsOn = 1;\n  var date = toDate(dirtyDate);\n  var currentDay = date.getUTCDay();\n  var remainder = day % 7;\n  var dayIndex = (remainder + 7) % 7;\n  var diff = (dayIndex < weekStartsOn ? 7 : 0) + day - currentDay;\n  date.setUTCDate(date.getUTCDate() + diff);\n  return date;\n}","import defaultLocale from \"../locale/en-US/index.js\";\nimport subMilliseconds from \"../subMilliseconds/index.js\";\nimport toDate from \"../toDate/index.js\";\nimport assign from \"../_lib/assign/index.js\";\nimport longFormatters from \"../_lib/format/longFormatters/index.js\";\nimport getTimezoneOffsetInMilliseconds from \"../_lib/getTimezoneOffsetInMilliseconds/index.js\";\nimport { isProtectedDayOfYearToken, isProtectedWeekYearToken, throwProtectedError } from \"../_lib/protectedTokens/index.js\";\nimport toInteger from \"../_lib/toInteger/index.js\";\nimport parsers from \"./_lib/parsers/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\nvar TIMEZONE_UNIT_PRIORITY = 10; // This RegExp consists of three parts separated by `|`:\n// - [yYQqMLwIdDecihHKkms]o matches any available ordinal number token\n//   (one of the certain letters followed by `o`)\n// - (\\w)\\1* matches any sequences of the same letter\n// - '' matches two quote characters in a row\n// - '(''|[^'])+('|$) matches anything surrounded by two quote characters ('),\n//   except a single quote symbol, which ends the sequence.\n//   Two quote characters do not end the sequence.\n//   If there is no matching single quote\n//   then the sequence will continue until the end of the string.\n// - . matches any single character unmatched by previous parts of the RegExps\n\nvar formattingTokensRegExp = /[yYQqMLwIdDecihHKkms]o|(\\w)\\1*|''|'(''|[^'])+('|$)|./g; // This RegExp catches symbols escaped by quotes, and also\n// sequences of symbols P, p, and the combinations like `PPPPPPPppppp`\n\nvar longFormattingTokensRegExp = /P+p+|P+|p+|''|'(''|[^'])+('|$)|./g;\nvar escapedStringRegExp = /^'([^]*?)'?$/;\nvar doubleQuoteRegExp = /''/g;\nvar notWhitespaceRegExp = /\\S/;\nvar unescapedLatinCharacterRegExp = /[a-zA-Z]/;\n/**\n * @name parse\n * @category Common Helpers\n * @summary Parse the date.\n *\n * @description\n * Return the date parsed from string using the given format string.\n *\n * > ⚠️ Please note that the `format` tokens differ from Moment.js and other libraries.\n * > See: https://git.io/fxCyr\n *\n * The characters in the format string wrapped between two single quotes characters (') are escaped.\n * Two single quotes in a row, whether inside or outside a quoted sequence, represent a 'real' single quote.\n *\n * Format of the format string is based on Unicode Technical Standard #35:\n * https://www.unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table\n * with a few additions (see note 5 below the table).\n *\n * Not all tokens are compatible. Combinations that don't make sense or could lead to bugs are prohibited\n * and will throw `RangeError`. For example usage of 24-hour format token with AM/PM token will throw an exception:\n *\n * ```javascript\n * parse('23 AM', 'HH a', new Date())\n * //=> RangeError: The format string mustn't contain `HH` and `a` at the same time\n * ```\n *\n * See the compatibility table: https://docs.google.com/spreadsheets/d/e/2PACX-1vQOPU3xUhplll6dyoMmVUXHKl_8CRDs6_ueLmex3SoqwhuolkuN3O05l4rqx5h1dKX8eb46Ul-CCSrq/pubhtml?gid=0&single=true\n *\n * Accepted format string patterns:\n * | Unit                            |Prior| Pattern | Result examples                   | Notes |\n * |---------------------------------|-----|---------|-----------------------------------|-------|\n * | Era                             | 140 | G..GGG  | AD, BC                            |       |\n * |                                 |     | GGGG    | Anno Domini, Before Christ        | 2     |\n * |                                 |     | GGGGG   | A, B                              |       |\n * | Calendar year                   | 130 | y       | 44, 1, 1900, 2017, 9999           | 4     |\n * |                                 |     | yo      | 44th, 1st, 1900th, 9999999th      | 4,5   |\n * |                                 |     | yy      | 44, 01, 00, 17                    | 4     |\n * |                                 |     | yyy     | 044, 001, 123, 999                | 4     |\n * |                                 |     | yyyy    | 0044, 0001, 1900, 2017            | 4     |\n * |                                 |     | yyyyy   | ...                               | 2,4   |\n * | Local week-numbering year       | 130 | Y       | 44, 1, 1900, 2017, 9000           | 4     |\n * |                                 |     | Yo      | 44th, 1st, 1900th, 9999999th      | 4,5   |\n * |                                 |     | YY      | 44, 01, 00, 17                    | 4,6   |\n * |                                 |     | YYY     | 044, 001, 123, 999                | 4     |\n * |                                 |     | YYYY    | 0044, 0001, 1900, 2017            | 4,6   |\n * |                                 |     | YYYYY   | ...                               | 2,4   |\n * | ISO week-numbering year         | 130 | R       | -43, 1, 1900, 2017, 9999, -9999   | 4,5   |\n * |                                 |     | RR      | -43, 01, 00, 17                   | 4,5   |\n * |                                 |     | RRR     | -043, 001, 123, 999, -999         | 4,5   |\n * |                                 |     | RRRR    | -0043, 0001, 2017, 9999, -9999    | 4,5   |\n * |                                 |     | RRRRR   | ...                               | 2,4,5 |\n * | Extended year                   | 130 | u       | -43, 1, 1900, 2017, 9999, -999    | 4     |\n * |                                 |     | uu      | -43, 01, 99, -99                  | 4     |\n * |                                 |     | uuu     | -043, 001, 123, 999, -999         | 4     |\n * |                                 |     | uuuu    | -0043, 0001, 2017, 9999, -9999    | 4     |\n * |                                 |     | uuuuu   | ...                               | 2,4   |\n * | Quarter (formatting)            | 120 | Q       | 1, 2, 3, 4                        |       |\n * |                                 |     | Qo      | 1st, 2nd, 3rd, 4th                | 5     |\n * |                                 |     | QQ      | 01, 02, 03, 04                    |       |\n * |                                 |     | QQQ     | Q1, Q2, Q3, Q4                    |       |\n * |                                 |     | QQQQ    | 1st quarter, 2nd quarter, ...     | 2     |\n * |                                 |     | QQQQQ   | 1, 2, 3, 4                        | 4     |\n * | Quarter (stand-alone)           | 120 | q       | 1, 2, 3, 4                        |       |\n * |                                 |     | qo      | 1st, 2nd, 3rd, 4th                | 5     |\n * |                                 |     | qq      | 01, 02, 03, 04                    |       |\n * |                                 |     | qqq     | Q1, Q2, Q3, Q4                    |       |\n * |                                 |     | qqqq    | 1st quarter, 2nd quarter, ...     | 2     |\n * |                                 |     | qqqqq   | 1, 2, 3, 4                        | 3     |\n * | Month (formatting)              | 110 | M       | 1, 2, ..., 12                     |       |\n * |                                 |     | Mo      | 1st, 2nd, ..., 12th               | 5     |\n * |                                 |     | MM      | 01, 02, ..., 12                   |       |\n * |                                 |     | MMM     | Jan, Feb, ..., Dec                |       |\n * |                                 |     | MMMM    | January, February, ..., December  | 2     |\n * |                                 |     | MMMMM   | J, F, ..., D                      |       |\n * | Month (stand-alone)             | 110 | L       | 1, 2, ..., 12                     |       |\n * |                                 |     | Lo      | 1st, 2nd, ..., 12th               | 5     |\n * |                                 |     | LL      | 01, 02, ..., 12                   |       |\n * |                                 |     | LLL     | Jan, Feb, ..., Dec                |       |\n * |                                 |     | LLLL    | January, February, ..., December  | 2     |\n * |                                 |     | LLLLL   | J, F, ..., D                      |       |\n * | Local week of year              | 100 | w       | 1, 2, ..., 53                     |       |\n * |                                 |     | wo      | 1st, 2nd, ..., 53th               | 5     |\n * |                                 |     | ww      | 01, 02, ..., 53                   |       |\n * | ISO week of year                | 100 | I       | 1, 2, ..., 53                     | 5     |\n * |                                 |     | Io      | 1st, 2nd, ..., 53th               | 5     |\n * |                                 |     | II      | 01, 02, ..., 53                   | 5     |\n * | Day of month                    |  90 | d       | 1, 2, ..., 31                     |       |\n * |                                 |     | do      | 1st, 2nd, ..., 31st               | 5     |\n * |                                 |     | dd      | 01, 02, ..., 31                   |       |\n * | Day of year                     |  90 | D       | 1, 2, ..., 365, 366               | 7     |\n * |                                 |     | Do      | 1st, 2nd, ..., 365th, 366th       | 5     |\n * |                                 |     | DD      | 01, 02, ..., 365, 366             | 7     |\n * |                                 |     | DDD     | 001, 002, ..., 365, 366           |       |\n * |                                 |     | DDDD    | ...                               | 2     |\n * | Day of week (formatting)        |  90 | E..EEE  | Mon, Tue, Wed, ..., Sun           |       |\n * |                                 |     | EEEE    | Monday, Tuesday, ..., Sunday      | 2     |\n * |                                 |     | EEEEE   | M, T, W, T, F, S, S               |       |\n * |                                 |     | EEEEEE  | Mo, Tu, We, Th, Fr, Sa, Su        |       |\n * | ISO day of week (formatting)    |  90 | i       | 1, 2, 3, ..., 7                   | 5     |\n * |                                 |     | io      | 1st, 2nd, ..., 7th                | 5     |\n * |                                 |     | ii      | 01, 02, ..., 07                   | 5     |\n * |                                 |     | iii     | Mon, Tue, Wed, ..., Sun           | 5     |\n * |                                 |     | iiii    | Monday, Tuesday, ..., Sunday      | 2,5   |\n * |                                 |     | iiiii   | M, T, W, T, F, S, S               | 5     |\n * |                                 |     | iiiiii  | Mo, Tu, We, Th, Fr, Sa, Su        | 5     |\n * | Local day of week (formatting)  |  90 | e       | 2, 3, 4, ..., 1                   |       |\n * |                                 |     | eo      | 2nd, 3rd, ..., 1st                | 5     |\n * |                                 |     | ee      | 02, 03, ..., 01                   |       |\n * |                                 |     | eee     | Mon, Tue, Wed, ..., Sun           |       |\n * |                                 |     | eeee    | Monday, Tuesday, ..., Sunday      | 2     |\n * |                                 |     | eeeee   | M, T, W, T, F, S, S               |       |\n * |                                 |     | eeeeee  | Mo, Tu, We, Th, Fr, Sa, Su        |       |\n * | Local day of week (stand-alone) |  90 | c       | 2, 3, 4, ..., 1                   |       |\n * |                                 |     | co      | 2nd, 3rd, ..., 1st                | 5     |\n * |                                 |     | cc      | 02, 03, ..., 01                   |       |\n * |                                 |     | ccc     | Mon, Tue, Wed, ..., Sun           |       |\n * |                                 |     | cccc    | Monday, Tuesday, ..., Sunday      | 2     |\n * |                                 |     | ccccc   | M, T, W, T, F, S, S               |       |\n * |                                 |     | cccccc  | Mo, Tu, We, Th, Fr, Sa, Su        |       |\n * | AM, PM                          |  80 | a..aaa  | AM, PM                            |       |\n * |                                 |     | aaaa    | a.m., p.m.                        | 2     |\n * |                                 |     | aaaaa   | a, p                              |       |\n * | AM, PM, noon, midnight          |  80 | b..bbb  | AM, PM, noon, midnight            |       |\n * |                                 |     | bbbb    | a.m., p.m., noon, midnight        | 2     |\n * |                                 |     | bbbbb   | a, p, n, mi                       |       |\n * | Flexible day period             |  80 | B..BBB  | at night, in the morning, ...     |       |\n * |                                 |     | BBBB    | at night, in the morning, ...     | 2     |\n * |                                 |     | BBBBB   | at night, in the morning, ...     |       |\n * | Hour [1-12]                     |  70 | h       | 1, 2, ..., 11, 12                 |       |\n * |                                 |     | ho      | 1st, 2nd, ..., 11th, 12th         | 5     |\n * |                                 |     | hh      | 01, 02, ..., 11, 12               |       |\n * | Hour [0-23]                     |  70 | H       | 0, 1, 2, ..., 23                  |       |\n * |                                 |     | Ho      | 0th, 1st, 2nd, ..., 23rd          | 5     |\n * |                                 |     | HH      | 00, 01, 02, ..., 23               |       |\n * | Hour [0-11]                     |  70 | K       | 1, 2, ..., 11, 0                  |       |\n * |                                 |     | Ko      | 1st, 2nd, ..., 11th, 0th          | 5     |\n * |                                 |     | KK      | 01, 02, ..., 11, 00               |       |\n * | Hour [1-24]                     |  70 | k       | 24, 1, 2, ..., 23                 |       |\n * |                                 |     | ko      | 24th, 1st, 2nd, ..., 23rd         | 5     |\n * |                                 |     | kk      | 24, 01, 02, ..., 23               |       |\n * | Minute                          |  60 | m       | 0, 1, ..., 59                     |       |\n * |                                 |     | mo      | 0th, 1st, ..., 59th               | 5     |\n * |                                 |     | mm      | 00, 01, ..., 59                   |       |\n * | Second                          |  50 | s       | 0, 1, ..., 59                     |       |\n * |                                 |     | so      | 0th, 1st, ..., 59th               | 5     |\n * |                                 |     | ss      | 00, 01, ..., 59                   |       |\n * | Seconds timestamp               |  40 | t       | 512969520                         |       |\n * |                                 |     | tt      | ...                               | 2     |\n * | Fraction of second              |  30 | S       | 0, 1, ..., 9                      |       |\n * |                                 |     | SS      | 00, 01, ..., 99                   |       |\n * |                                 |     | SSS     | 000, 001, ..., 999                |       |\n * |                                 |     | SSSS    | ...                               | 2     |\n * | Milliseconds timestamp          |  20 | T       | 512969520900                      |       |\n * |                                 |     | TT      | ...                               | 2     |\n * | Timezone (ISO-8601 w/ Z)        |  10 | X       | -08, +0530, Z                     |       |\n * |                                 |     | XX      | -0800, +0530, Z                   |       |\n * |                                 |     | XXX     | -08:00, +05:30, Z                 |       |\n * |                                 |     | XXXX    | -0800, +0530, Z, +123456          | 2     |\n * |                                 |     | XXXXX   | -08:00, +05:30, Z, +12:34:56      |       |\n * | Timezone (ISO-8601 w/o Z)       |  10 | x       | -08, +0530, +00                   |       |\n * |                                 |     | xx      | -0800, +0530, +0000               |       |\n * |                                 |     | xxx     | -08:00, +05:30, +00:00            | 2     |\n * |                                 |     | xxxx    | -0800, +0530, +0000, +123456      |       |\n * |                                 |     | xxxxx   | -08:00, +05:30, +00:00, +12:34:56 |       |\n * | Long localized date             |  NA | P       | 05/29/1453                        | 5,8   |\n * |                                 |     | PP      | May 29, 1453                      |       |\n * |                                 |     | PPP     | May 29th, 1453                    |       |\n * |                                 |     | PPPP    | Sunday, May 29th, 1453            | 2,5,8 |\n * | Long localized time             |  NA | p       | 12:00 AM                          | 5,8   |\n * |                                 |     | pp      | 12:00:00 AM                       |       |\n * | Combination of date and time    |  NA | Pp      | 05/29/1453, 12:00 AM              |       |\n * |                                 |     | PPpp    | May 29, 1453, 12:00:00 AM         |       |\n * |                                 |     | PPPpp   | May 29th, 1453 at ...             |       |\n * |                                 |     | PPPPpp  | Sunday, May 29th, 1453 at ...     | 2,5,8 |\n * Notes:\n * 1. \"Formatting\" units (e.g. formatting quarter) in the default en-US locale\n *    are the same as \"stand-alone\" units, but are different in some languages.\n *    \"Formatting\" units are declined according to the rules of the language\n *    in the context of a date. \"Stand-alone\" units are always nominative singular.\n *    In `format` function, they will produce different result:\n *\n *    `format(new Date(2017, 10, 6), 'do LLLL', {locale: cs}) //=> '6. listopad'`\n *\n *    `format(new Date(2017, 10, 6), 'do MMMM', {locale: cs}) //=> '6. listopadu'`\n *\n *    `parse` will try to match both formatting and stand-alone units interchangably.\n *\n * 2. Any sequence of the identical letters is a pattern, unless it is escaped by\n *    the single quote characters (see below).\n *    If the sequence is longer than listed in table:\n *    - for numerical units (`yyyyyyyy`) `parse` will try to match a number\n *      as wide as the sequence\n *    - for text units (`MMMMMMMM`) `parse` will try to match the widest variation of the unit.\n *      These variations are marked with \"2\" in the last column of the table.\n *\n * 3. `QQQQQ` and `qqqqq` could be not strictly numerical in some locales.\n *    These tokens represent the shortest form of the quarter.\n *\n * 4. The main difference between `y` and `u` patterns are B.C. years:\n *\n *    | Year | `y` | `u` |\n *    |------|-----|-----|\n *    | AC 1 |   1 |   1 |\n *    | BC 1 |   1 |   0 |\n *    | BC 2 |   2 |  -1 |\n *\n *    Also `yy` will try to guess the century of two digit year by proximity with `referenceDate`:\n *\n *    `parse('50', 'yy', new Date(2018, 0, 1)) //=> Sat Jan 01 2050 00:00:00`\n *\n *    `parse('75', 'yy', new Date(2018, 0, 1)) //=> Wed Jan 01 1975 00:00:00`\n *\n *    while `uu` will just assign the year as is:\n *\n *    `parse('50', 'uu', new Date(2018, 0, 1)) //=> Sat Jan 01 0050 00:00:00`\n *\n *    `parse('75', 'uu', new Date(2018, 0, 1)) //=> Tue Jan 01 0075 00:00:00`\n *\n *    The same difference is true for local and ISO week-numbering years (`Y` and `R`),\n *    except local week-numbering years are dependent on `options.weekStartsOn`\n *    and `options.firstWeekContainsDate` (compare [setISOWeekYear]{@link https://date-fns.org/docs/setISOWeekYear}\n *    and [setWeekYear]{@link https://date-fns.org/docs/setWeekYear}).\n *\n * 5. These patterns are not in the Unicode Technical Standard #35:\n *    - `i`: ISO day of week\n *    - `I`: ISO week of year\n *    - `R`: ISO week-numbering year\n *    - `o`: ordinal number modifier\n *    - `P`: long localized date\n *    - `p`: long localized time\n *\n * 6. `YY` and `YYYY` tokens represent week-numbering years but they are often confused with years.\n *    You should enable `options.useAdditionalWeekYearTokens` to use them. See: https://git.io/fxCyr\n *\n * 7. `D` and `DD` tokens represent days of the year but they are ofthen confused with days of the month.\n *    You should enable `options.useAdditionalDayOfYearTokens` to use them. See: https://git.io/fxCyr\n *\n * 8. `P+` tokens do not have a defined priority since they are merely aliases to other tokens based\n *    on the given locale.\n *\n *    using `en-US` locale: `P` => `MM/dd/yyyy`\n *    using `en-US` locale: `p` => `hh:mm a`\n *    using `pt-BR` locale: `P` => `dd/MM/yyyy`\n *    using `pt-BR` locale: `p` => `HH:mm`\n *\n * Values will be assigned to the date in the descending order of its unit's priority.\n * Units of an equal priority overwrite each other in the order of appearance.\n *\n * If no values of higher priority are parsed (e.g. when parsing string 'January 1st' without a year),\n * the values will be taken from 3rd argument `referenceDate` which works as a context of parsing.\n *\n * `referenceDate` must be passed for correct work of the function.\n * If you're not sure which `referenceDate` to supply, create a new instance of Date:\n * `parse('02/11/2014', 'MM/dd/yyyy', new Date())`\n * In this case parsing will be done in the context of the current date.\n * If `referenceDate` is `Invalid Date` or a value not convertible to valid `Date`,\n * then `Invalid Date` will be returned.\n *\n * The result may vary by locale.\n *\n * If `formatString` matches with `dateString` but does not provides tokens, `referenceDate` will be returned.\n *\n * If parsing failed, `Invalid Date` will be returned.\n * Invalid Date is a Date, whose time value is NaN.\n * Time value of Date: http://es5.github.io/#x15.9.1.1\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * - Old `parse` was renamed to `toDate`.\n *   Now `parse` is a new function which parses a string using a provided format.\n *\n *   ```javascript\n *   // Before v2.0.0\n *   parse('2016-01-01')\n *\n *   // v2.0.0 onward (toDate no longer accepts a string)\n *   toDate(1392098430000) // Unix to timestamp\n *   toDate(new Date(2014, 1, 11, 11, 30, 30)) // Cloning the date\n *   parse('2016-01-01', 'yyyy-MM-dd', new Date())\n *   ```\n *\n * @param {String} dateString - the string to parse\n * @param {String} formatString - the string of tokens\n * @param {Date|Number} referenceDate - defines values missing from the parsed dateString\n * @param {Object} [options] - an object with options.\n * @param {Locale} [options.locale=defaultLocale] - the locale object. See [Locale]{@link https://date-fns.org/docs/Locale}\n * @param {0|1|2|3|4|5|6} [options.weekStartsOn=0] - the index of the first day of the week (0 - Sunday)\n * @param {1|2|3|4|5|6|7} [options.firstWeekContainsDate=1] - the day of January, which is always in the first week of the year\n * @param {Boolean} [options.useAdditionalWeekYearTokens=false] - if true, allows usage of the week-numbering year tokens `YY` and `YYYY`;\n *   see: https://git.io/fxCyr\n * @param {Boolean} [options.useAdditionalDayOfYearTokens=false] - if true, allows usage of the day of year tokens `D` and `DD`;\n *   see: https://git.io/fxCyr\n * @returns {Date} the parsed date\n * @throws {TypeError} 3 arguments required\n * @throws {RangeError} `options.weekStartsOn` must be between 0 and 6\n * @throws {RangeError} `options.firstWeekContainsDate` must be between 1 and 7\n * @throws {RangeError} `options.locale` must contain `match` property\n * @throws {RangeError} use `yyyy` instead of `YYYY` for formatting years using [format provided] to the input [input provided]; see: https://git.io/fxCyr\n * @throws {RangeError} use `yy` instead of `YY` for formatting years using [format provided] to the input [input provided]; see: https://git.io/fxCyr\n * @throws {RangeError} use `d` instead of `D` for formatting days of the month using [format provided] to the input [input provided]; see: https://git.io/fxCyr\n * @throws {RangeError} use `dd` instead of `DD` for formatting days of the month using [format provided] to the input [input provided]; see: https://git.io/fxCyr\n * @throws {RangeError} format string contains an unescaped latin alphabet character\n *\n * @example\n * // Parse 11 February 2014 from middle-endian format:\n * var result = parse('02/11/2014', 'MM/dd/yyyy', new Date())\n * //=> Tue Feb 11 2014 00:00:00\n *\n * @example\n * // Parse 28th of February in Esperanto locale in the context of 2010 year:\n * import eo from 'date-fns/locale/eo'\n * var result = parse('28-a de februaro', \"do 'de' MMMM\", new Date(2010, 0, 1), {\n *   locale: eo\n * })\n * //=> Sun Feb 28 2010 00:00:00\n */\n\nexport default function parse(dirtyDateString, dirtyFormatString, dirtyReferenceDate, dirtyOptions) {\n  requiredArgs(3, arguments);\n  var dateString = String(dirtyDateString);\n  var formatString = String(dirtyFormatString);\n  var options = dirtyOptions || {};\n  var locale = options.locale || defaultLocale;\n\n  if (!locale.match) {\n    throw new RangeError('locale must contain match property');\n  }\n\n  var localeFirstWeekContainsDate = locale.options && locale.options.firstWeekContainsDate;\n  var defaultFirstWeekContainsDate = localeFirstWeekContainsDate == null ? 1 : toInteger(localeFirstWeekContainsDate);\n  var firstWeekContainsDate = options.firstWeekContainsDate == null ? defaultFirstWeekContainsDate : toInteger(options.firstWeekContainsDate); // Test if weekStartsOn is between 1 and 7 _and_ is not NaN\n\n  if (!(firstWeekContainsDate >= 1 && firstWeekContainsDate <= 7)) {\n    throw new RangeError('firstWeekContainsDate must be between 1 and 7 inclusively');\n  }\n\n  var localeWeekStartsOn = locale.options && locale.options.weekStartsOn;\n  var defaultWeekStartsOn = localeWeekStartsOn == null ? 0 : toInteger(localeWeekStartsOn);\n  var weekStartsOn = options.weekStartsOn == null ? defaultWeekStartsOn : toInteger(options.weekStartsOn); // Test if weekStartsOn is between 0 and 6 _and_ is not NaN\n\n  if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {\n    throw new RangeError('weekStartsOn must be between 0 and 6 inclusively');\n  }\n\n  if (formatString === '') {\n    if (dateString === '') {\n      return toDate(dirtyReferenceDate);\n    } else {\n      return new Date(NaN);\n    }\n  }\n\n  var subFnOptions = {\n    firstWeekContainsDate: firstWeekContainsDate,\n    weekStartsOn: weekStartsOn,\n    locale: locale\n  }; // If timezone isn't specified, it will be set to the system timezone\n\n  var setters = [{\n    priority: TIMEZONE_UNIT_PRIORITY,\n    subPriority: -1,\n    set: dateToSystemTimezone,\n    index: 0\n  }];\n  var i;\n  var tokens = formatString.match(longFormattingTokensRegExp).map(function (substring) {\n    var firstCharacter = substring[0];\n\n    if (firstCharacter === 'p' || firstCharacter === 'P') {\n      var longFormatter = longFormatters[firstCharacter];\n      return longFormatter(substring, locale.formatLong, subFnOptions);\n    }\n\n    return substring;\n  }).join('').match(formattingTokensRegExp);\n  var usedTokens = [];\n\n  for (i = 0; i < tokens.length; i++) {\n    var token = tokens[i];\n\n    if (!options.useAdditionalWeekYearTokens && isProtectedWeekYearToken(token)) {\n      throwProtectedError(token, formatString, dirtyDateString);\n    }\n\n    if (!options.useAdditionalDayOfYearTokens && isProtectedDayOfYearToken(token)) {\n      throwProtectedError(token, formatString, dirtyDateString);\n    }\n\n    var firstCharacter = token[0];\n    var parser = parsers[firstCharacter];\n\n    if (parser) {\n      var incompatibleTokens = parser.incompatibleTokens;\n\n      if (Array.isArray(incompatibleTokens)) {\n        var incompatibleToken = void 0;\n\n        for (var _i = 0; _i < usedTokens.length; _i++) {\n          var usedToken = usedTokens[_i].token;\n\n          if (incompatibleTokens.indexOf(usedToken) !== -1 || usedToken === firstCharacter) {\n            incompatibleToken = usedTokens[_i];\n            break;\n          }\n        }\n\n        if (incompatibleToken) {\n          throw new RangeError(\"The format string mustn't contain `\".concat(incompatibleToken.fullToken, \"` and `\").concat(token, \"` at the same time\"));\n        }\n      } else if (parser.incompatibleTokens === '*' && usedTokens.length) {\n        throw new RangeError(\"The format string mustn't contain `\".concat(token, \"` and any other token at the same time\"));\n      }\n\n      usedTokens.push({\n        token: firstCharacter,\n        fullToken: token\n      });\n      var parseResult = parser.parse(dateString, token, locale.match, subFnOptions);\n\n      if (!parseResult) {\n        return new Date(NaN);\n      }\n\n      setters.push({\n        priority: parser.priority,\n        subPriority: parser.subPriority || 0,\n        set: parser.set,\n        validate: parser.validate,\n        value: parseResult.value,\n        index: setters.length\n      });\n      dateString = parseResult.rest;\n    } else {\n      if (firstCharacter.match(unescapedLatinCharacterRegExp)) {\n        throw new RangeError('Format string contains an unescaped latin alphabet character `' + firstCharacter + '`');\n      } // Replace two single quote characters with one single quote character\n\n\n      if (token === \"''\") {\n        token = \"'\";\n      } else if (firstCharacter === \"'\") {\n        token = cleanEscapedString(token);\n      } // Cut token from string, or, if string doesn't match the token, return Invalid Date\n\n\n      if (dateString.indexOf(token) === 0) {\n        dateString = dateString.slice(token.length);\n      } else {\n        return new Date(NaN);\n      }\n    }\n  } // Check if the remaining input contains something other than whitespace\n\n\n  if (dateString.length > 0 && notWhitespaceRegExp.test(dateString)) {\n    return new Date(NaN);\n  }\n\n  var uniquePrioritySetters = setters.map(function (setter) {\n    return setter.priority;\n  }).sort(function (a, b) {\n    return b - a;\n  }).filter(function (priority, index, array) {\n    return array.indexOf(priority) === index;\n  }).map(function (priority) {\n    return setters.filter(function (setter) {\n      return setter.priority === priority;\n    }).sort(function (a, b) {\n      return b.subPriority - a.subPriority;\n    });\n  }).map(function (setterArray) {\n    return setterArray[0];\n  });\n  var date = toDate(dirtyReferenceDate);\n\n  if (isNaN(date)) {\n    return new Date(NaN);\n  } // Convert the date in system timezone to the same date in UTC+00:00 timezone.\n  // This ensures that when UTC functions will be implemented, locales will be compatible with them.\n  // See an issue about UTC functions: https://github.com/date-fns/date-fns/issues/37\n\n\n  var utcDate = subMilliseconds(date, getTimezoneOffsetInMilliseconds(date));\n  var flags = {};\n\n  for (i = 0; i < uniquePrioritySetters.length; i++) {\n    var setter = uniquePrioritySetters[i];\n\n    if (setter.validate && !setter.validate(utcDate, setter.value, subFnOptions)) {\n      return new Date(NaN);\n    }\n\n    var result = setter.set(utcDate, flags, setter.value, subFnOptions); // Result is tuple (date, flags)\n\n    if (result[0]) {\n      utcDate = result[0];\n      assign(flags, result[1]); // Result is date\n    } else {\n      utcDate = result;\n    }\n  }\n\n  return utcDate;\n}\n\nfunction dateToSystemTimezone(date, flags) {\n  if (flags.timestampIsSet) {\n    return date;\n  }\n\n  var convertedDate = new Date(0);\n  convertedDate.setFullYear(date.getUTCFullYear(), date.getUTCMonth(), date.getUTCDate());\n  convertedDate.setHours(date.getUTCHours(), date.getUTCMinutes(), date.getUTCSeconds(), date.getUTCMilliseconds());\n  return convertedDate;\n}\n\nfunction cleanEscapedString(input) {\n  return input.match(escapedStringRegExp)[1].replace(doubleQuoteRegExp, \"'\");\n}","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport { useContext, useCallback } from 'react';\nimport defaultLocale from '../locales/default';\nimport { CustomContext } from '../CustomProvider/CustomProvider';\nimport { format, parse } from '../utils/dateUtils';\n\nvar mergeObject = function mergeObject(list) {\n  return list.reduce(function (a, b) {\n    a = _extends({}, a, b);\n    return a;\n  }, {});\n};\n\nvar getDefaultRTL = function getDefaultRTL() {\n  return typeof window !== 'undefined' && (document.body.getAttribute('dir') || document.dir) === 'rtl';\n};\n/**\n * A hook to get custom configuration of `<CustomProvider>`\n * @param keys\n */\n\n\nfunction useCustom(keys, overrideLocale) {\n  var _locale$Calendar2, _locale$Calendar4;\n\n  var _useContext = useContext(CustomContext),\n      _useContext$locale = _useContext.locale,\n      locale = _useContext$locale === void 0 ? defaultLocale : _useContext$locale,\n      _useContext$rtl = _useContext.rtl,\n      rtl = _useContext$rtl === void 0 ? getDefaultRTL() : _useContext$rtl,\n      formatDate = _useContext.formatDate,\n      parseDate = _useContext.parseDate;\n\n  var componentLocale = _extends({}, locale === null || locale === void 0 ? void 0 : locale.common, typeof keys === 'string' ? locale === null || locale === void 0 ? void 0 : locale[keys] : mergeObject(keys.map(function (key) {\n    return locale === null || locale === void 0 ? void 0 : locale[key];\n  }))); // Component custom locale\n\n\n  if (overrideLocale) {\n    componentLocale = mergeObject([componentLocale, overrideLocale]);\n  }\n\n  var defaultFormatDate = useCallback(function (date, formatStr) {\n    var _locale$Calendar;\n\n    return format(date, formatStr, {\n      locale: locale === null || locale === void 0 ? void 0 : (_locale$Calendar = locale.Calendar) === null || _locale$Calendar === void 0 ? void 0 : _locale$Calendar.dateLocale\n    });\n  }, [(_locale$Calendar2 = locale.Calendar) === null || _locale$Calendar2 === void 0 ? void 0 : _locale$Calendar2.dateLocale]);\n  var defaultParseDate = useCallback(function (dateString, formatString) {\n    var _locale$Calendar3;\n\n    return parse(dateString, formatString, new Date(), {\n      locale: locale === null || locale === void 0 ? void 0 : (_locale$Calendar3 = locale.Calendar) === null || _locale$Calendar3 === void 0 ? void 0 : _locale$Calendar3.dateLocale\n    });\n  }, [(_locale$Calendar4 = locale.Calendar) === null || _locale$Calendar4 === void 0 ? void 0 : _locale$Calendar4.dateLocale]);\n  return {\n    locale: componentLocale,\n    rtl: rtl,\n    formatDate: formatDate || defaultFormatDate,\n    parseDate: parseDate || defaultParseDate\n  };\n}\n\nexport default useCustom;"],"sourceRoot":""}