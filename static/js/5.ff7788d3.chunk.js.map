{"version":3,"sources":["cases/Cesium3DTiles/colorBuildingFS.glsl","hooks/useCesium.js","../node_modules/cesium/Source/Core sync ///cesium//cesium//Source//Core//buildModuleUrl/.js","cases/components/CesiumContainer/CesiumContainer.jsx","cases/components/Toolbar/Toolbar.jsx","cases/Cesium3DTiles/ChangeModelShader.jsx"],"names":["module","exports","useCesium","callback","viewerRef","useRef","useEffect","viewer","Viewer","fullscreenElement","scene","debugShowFramesPerSecond","postProcessStages","fxaa","enabled","createViewer","current","destroy","webpackEmptyContext","req","e","Error","code","keys","resolve","id","CesiumContainer","children","Toolbar","className","originalFS","currentFS","ChangeModelShader","useState","enable","setEnable","terrainProvider","createWorldTerrain","tileset","createOsmBuildings","colorBlendMode","ColorBlendMode","REPLACE","primitives","add","camera","setView","destination","Cartesian3","fromDegrees","orientation","heading","CesiumMath","toRadians","pitch","tileVisible","addEventListener","tile","_model","content","_sourcePrograms","_rendererResources","Object","forEach","key","program","sourceShaders","fragmentShader","_shouldRegenerateShaders","appearance","onClick","colorBuildingFS"],"mappings":"gKAAAA,EAAOC,QAAU,w6B,iCCAjB,oBAgDeC,IA/Bf,SAAmBC,GACjB,IAAMC,EAAYC,iBAAO,MAgBzB,OAfAC,qBAAU,WACR,IAAMC,EAiBV,WACE,IAAMA,EAAS,IAAIC,IAAO,kBAAmB,CAC3CC,kBAAmB,oBAMrB,OAHAF,EAAOG,MAAMC,0BAA2B,EACxCJ,EAAOG,MAAME,kBAAkBC,KAAKC,SAAU,EAEvCP,EAzBUQ,GAKf,OAJAX,EAAUY,QAAUT,EAEpBJ,GAAYA,EAASI,GAEd,WACL,IACEA,EAAOU,UACP,cAIH,IAEIb,I,kBClCT,SAASc,EAAoBC,GAC5B,IAAIC,EAAI,IAAIC,MAAM,uBAAyBF,EAAM,KAEjD,MADAC,EAAEE,KAAO,mBACHF,EAEPF,EAAoBK,KAAO,WAAa,MAAO,IAC/CL,EAAoBM,QAAUN,EAC9BlB,EAAOC,QAAUiB,EACjBA,EAAoBO,GAAK,K,wECRzB,yBAMeC,UAJf,YAAwC,IAAbC,EAAY,EAAZA,SACzB,OAAO,qBAAKF,GAAG,kBAAR,SAA2BE,M,gCCHpC,yBAMeC,UAJf,YAAgC,IAAbD,EAAY,EAAZA,SACjB,OAAO,qBAAKE,UAAU,UAAf,SAA0BF,M,8HCW/BG,EAAa,GACbC,EAAY,GA+DDC,UA7Df,WACE,MAA4BC,oBAAS,GAArC,mBAAOC,EAAP,KAAeC,EAAf,KA2CA,OAzCAjC,aAAU,SAAAK,GACRA,EAAO6B,gBAAkBC,cAEzB,IAAMC,EAAUC,cAChBD,EAAQE,eAAiBC,IAAeC,QACxCnC,EAAOG,MAAMiC,WAAWC,IAAIN,GAE5B/B,EAAOG,MAAMmC,OAAOC,QAAQ,CAC1BC,YAAaC,IAAWC,aAAa,SAAU,OAAQ,KACvDC,YAAa,CACXC,QAASC,IAAWC,UAAU,IAC9BC,MAAOF,IAAWC,WAAW,OAIjCf,EAAQiB,YAAYC,kBAElB,SAAAC,GACE,IACQC,EADYD,EAAZE,QACAD,OAEJA,GAAUA,EAAOE,iBAAmBF,EAAOG,qBAC7CC,OAAOvC,KAAKmC,EAAOE,iBAAiBG,SAAQ,SAAAC,GAC1C,IAAMC,EAAUP,EAAOE,gBAAgBI,GAElClC,IACHA,EAAa4B,EAAOG,mBAAmBK,cAAcD,EAAQE,gBAC7DpC,EAAYD,GAId4B,EAAOG,mBAAmBK,cAAcD,EAAQE,gBAAkBpC,KAIpE2B,EAAOU,0BAA2B,SAOxC,cAAC,UAAD,UACE,cAAC,UAAD,UACE,eAAC,IAAD,CACEC,WAAW,UACXC,QAAS,WACPvC,EAAYG,EAASJ,EAAayC,IAClCpC,GAAWD,IAJf,iBAOOA,EAAS,WAAa,SAP7B","file":"static/js/5.ff7788d3.chunk.js","sourcesContent":["module.exports = \"precision highp float;\\n\\nuniform vec4 u_baseColorFactor;\\n\\nvarying vec3 v_positionEC;\\nvarying vec3 v_normal;\\n\\nvec4 getPhongColor(vec4 color) {\\n  vec3 positionToEyeEC = -v_positionEC;\\n\\n  czm_material material;\\n  material.diffuse = color.rgb;\\n  material.specular = 0.0;\\n  material.shininess = 1.0;\\n  material.normal = v_normal;\\n  material.emission = vec3(0.0);\\n  material.alpha = color.a;\\n\\n  return czm_phong(normalize(positionToEyeEC), material, czm_lightDirectionEC);\\n\\n}\\n\\nvoid main(void) {\\n  vec4 color = u_baseColorFactor;\\n  vec4 position = czm_inverseModelView * vec4(v_positionEC, 1.);\\n\\n  float time = czm_frameNumber / 73.;\\n\\n  float flow = sin(time) * .25 + .75;\\n  float deep = clamp(position.z / (200. + 50. * flow) + .5 * flow, 0., 1.5);\\n  vec4 postColor = color * deep;\\n\\n  vec4 phongColor = getPhongColor(vec4(postColor.rgb, 1.));\\n\\n  gl_FragColor = mix(phongColor, postColor, flow - .25);\\n}\\n\";","import { useEffect, useRef } from 'react'\nimport { Viewer } from 'cesium'\n\n/**\n * @callback CesiumHandler\n *\n * @param {Viewer} viewer Viewer instance.\n */\n\n/** @typedef {import('react')} React */\n\n/**\n * Use cesium hook.\n *\n * @param {CesiumHandler} callback\n * @returns {React.MutableRefObject.<null|Viewer>}\n */\nfunction useCesium(callback) {\n  const viewerRef = useRef(null)\n  useEffect(() => {\n    const viewer = createViewer()\n    viewerRef.current = viewer\n\n    callback && callback(viewer)\n\n    return () => {\n      try {\n        viewer.destroy()\n      } catch {}\n    }\n\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [])\n\n  return viewerRef\n}\n\nfunction createViewer() {\n  const viewer = new Viewer('cesiumContainer', {\n    fullscreenElement: 'cesiumContainer'\n  })\n\n  viewer.scene.debugShowFramesPerSecond = true\n  viewer.scene.postProcessStages.fxaa.enabled = true\n\n  return viewer\n}\n\nexport default useCesium\n","function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 202;","import './CesiumContainer.less'\n\nfunction CesiumContainer({ children }) {\n  return <div id=\"cesiumContainer\">{children}</div>\n}\n\nexport default CesiumContainer\n","import './Toolbar.less'\n\nfunction Toolbar({ children }) {\n  return <div className=\"toolbar\">{children}</div>\n}\n\nexport default Toolbar\n","import useCesium from '@/hooks/useCesium'\nimport { useState } from 'react'\nimport { Button } from 'rsuite'\nimport Toolbar from '@/cases/components/Toolbar/Toolbar'\nimport CesiumContainer from '@/cases/components/CesiumContainer/CesiumContainer'\nimport {\n  createWorldTerrain,\n  createOsmBuildings,\n  Cartesian3,\n  Math as CesiumMath,\n  ColorBlendMode\n} from 'cesium'\nimport colorBuildingFS from './colorBuildingFS.glsl'\n\nlet originalFS = ''\nlet currentFS = ''\n\nfunction ChangeModelShader() {\n  const [enable, setEnable] = useState(false)\n\n  useCesium(viewer => {\n    viewer.terrainProvider = createWorldTerrain()\n\n    const tileset = createOsmBuildings()\n    tileset.colorBlendMode = ColorBlendMode.REPLACE\n    viewer.scene.primitives.add(tileset)\n\n    viewer.scene.camera.setView({\n      destination: Cartesian3.fromDegrees(-122.3472, 47.598, 370),\n      orientation: {\n        heading: CesiumMath.toRadians(10),\n        pitch: CesiumMath.toRadians(-10)\n      }\n    })\n\n    tileset.tileVisible.addEventListener(\n      /** @param {import('cesium').Cesium3DTile} tile */\n      tile => {\n        const { content } = tile\n        const { _model } = content\n\n        if (_model && _model._sourcePrograms && _model._rendererResources) {\n          Object.keys(_model._sourcePrograms).forEach(key => {\n            const program = _model._sourcePrograms[key]\n\n            if (!originalFS) {\n              originalFS = _model._rendererResources.sourceShaders[program.fragmentShader]\n              currentFS = originalFS\n            }\n\n            // Custom shaders.\n            _model._rendererResources.sourceShaders[program.fragmentShader] = currentFS\n          })\n\n          // Recompile shader.\n          _model._shouldRegenerateShaders = true\n        }\n      }\n    )\n  })\n\n  return (\n    <CesiumContainer>\n      <Toolbar>\n        <Button\n          appearance=\"primary\"\n          onClick={() => {\n            currentFS = enable ? originalFS : colorBuildingFS\n            setEnable(!enable)\n          }}\n        >\n          Use {enable ? 'Original' : 'Custom'} Fragment Shader\n        </Button>\n      </Toolbar>\n    </CesiumContainer>\n  )\n}\n\nexport default ChangeModelShader\n"],"sourceRoot":""}